<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Locally Optimal]]></title>
  <link href="http://striglia.github.com/atom.xml" rel="self"/>
  <link href="http://striglia.github.com/"/>
  <updated>2012-09-29T23:33:09-07:00</updated>
  <id>http://striglia.github.com/</id>
  <author>
    <name><![CDATA[Scott Triglia]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Testing with Mock]]></title>
    <link href="http://striglia.github.com/blog/2012/09/10/testing-with-mock/"/>
    <updated>2012-09-10T19:34:00-07:00</updated>
    <id>http://striglia.github.com/blog/2012/09/10/testing-with-mock</id>
    <content type="html"><![CDATA[<p>More than any other area, I&#8217;ve found software testing to be the discipline which I knew the least about before joining up at Yelp full time. Sure, there was the normal insistence in my time as an undergraduate that I learn how to test units of code, and I&#8217;d heard plenty about the value of unit testing from any number of people or blogs, but when it came right down to it relatively few people I knew ever employed it to a meaningful degree during college and my graduate work. The simple truth was that projects rarely lasted long enough for the fruits of proper testing to be borne out.</p>

<p>Now I am sure plenty of people would disagree with that statement, pointing to how their various school projects were made better or simpler by judicious application of unit tests, but the goal of this post isn&#8217;t arguing about whether or not testing is worthwhile. My goal is to dive in a little bit to one particular area of testing that I had essentially zero exposure to before joining industry &#8211; the mocking of methods in tests.</p>

<!-- more -->


<h3>The basics of mocks</h3>

<p>Given my complete ignorance the first time I was exposed to mocks, I&#8217;ll start at the beginning &#8211; a simple definition. Now there&#8217;s some disagreement on the basic terms involved here, but I will default to <a href="http://martinfowler.com/articles/mocksArentStubs.html">Martin Fowler&#8217;s use of the work mock</a>, and summarize it as follows.</p>

<p>To mock a method for a test involves verifying behavior. This can include:</p>

<ol>
<li>asserting that it is called the expected number of times</li>
<li>asserting that it is called with the expected arguments</li>
<li>and finally replacing its normal execution with the execution of a stand-in method (or a fixed return value)</li>
</ol>


<p>You&#8217;ll immediately notice two distinct purposes to mocking in tests. First, they define (moreover, assert!) an interface between the code under test and the method you are mocking out. This is done both by agreeing upon the arguments passed to the mocked method and by checking how many times the method is called. Separate from these interface tests, the method itself is replaced by an imposter for the sake of this test.</p>

<p>So I&#8217;ve briefly described the spirit of a mock, but have left it entirely without motivation. Isn&#8217;t the entire point of tests to actually test the real system? If I replace part of my code with something else, doesn&#8217;t this mean any bugs in the mocked out code will be hidden from my tests? Strictly speaking, these complaints are valid. Mocking out a method means, for that test, the method&#8217;s true code will not be exercised.</p>

<p>But prepare yourself for this, because it blew my mind the first several times I heard it &#8211; that is the entire point.</p>

<h3>Why mock at all?</h3>

<p>Outrage! Mutiny! What good is a test that doesn&#8217;t actually test the code?! Well collect yourself, settle down, and I&#8217;ll give you a real-world example that I hope will justify what I&#8217;m describing.</p>

<p>Let&#8217;s imagine an extremely simple program, one almost too simple to test at all. Our goal is to write a tiny little wrapper around <a href="https://developers.google.com/maps/documentation/geocoding/">Google&#8217;s Geocoding API</a>. In case you aren&#8217;t already familiar with the concept of a geocoder, I&#8217;ll summarize it very simply for our purposes as a black box that takes in a string, e.g. &#8216;Mission District, San Francisco&#8217;, and returns its best guesses at the location you are interested in, along with detailed information on each like longitude/latitude, city, state, country and so on.</p>

<p>So back to our program. Envision a simple application, which is meant to accept a city name and return you the list of American states which contain a city of that name. Our actual implementation will be a simple wrapper around Google&#8217;s API where, if the original submitted city name was &#8216;Foobar&#8217;, we will search for &#8216;Foobar, AL&#8217;, &#8216;Foobar, AK&#8217;, and so on with each state name, recording when we get matches and returning the whole list at the end. Forgive me the clumsy example, but it will prove easy to reason about.</p>

<p>Now lets think about testing our little utility&#8230;.what parts of our program really need to be tested? Let&#8217;s throw together a few likely prospects:</p>

<ol>
<li>We should test to make sure we&#8217;re constructing our places to geocode correctly.</li>
<li>Our validation of Google&#8217;s responses should be tested (if Google has a match for &#8216;Foobar, CA&#8217;, and we were searching for &#8216;Foobar&#8217; as our city, do we add California to our list of matched states?)</li>
<li>And just for kicks we may as well make sure the whole system runs properly</li>
</ol>


<p>Cool&#8230;we&#8217;ve got our plan together. Let&#8217;s assume we really want to test the
above three pieces of our program and our code base is as shown below.</p>

<figure class='code'><figcaption><span> (count_cities.py)</span> <a href='http://striglia.github.com/downloads/code/count_cities.py'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="kn">from</span> <span class="nn">geological_data</span> <span class="kn">import</span> <span class="n">US_STATES</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">magic_geocoding_library</span> <span class="kn">import</span> <span class="n">geocode_address</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">build_query_locations</span><span class="p">(</span><span class="n">city</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="s">&#39;</span><span class="si">%s</span><span class="s">, </span><span class="si">%s</span><span class="s">, USA&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">city</span><span class="p">,</span> <span class="n">state</span><span class="p">)</span> <span class="k">for</span> <span class="n">state</span> <span class="ow">in</span> <span class="n">US_STATES</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">find_matching_states</span><span class="p">(</span><span class="n">places_to_geocode</span><span class="p">,</span> <span class="n">city_to_match</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Create a list of each state we found a geocoder result matching our city.&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">geocoding_results</span> <span class="o">=</span> <span class="p">[</span><span class="n">geocode_address</span><span class="p">(</span><span class="n">place</span><span class="p">)</span> <span class="k">for</span> <span class="n">place</span> <span class="ow">in</span> <span class="n">places_to_geocode</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">matching_states</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">result</span> <span class="ow">in</span> <span class="n">geocoding_results</span><span class="p">:</span>
</span><span class='line'>        <span class="n">_geocode_had_matching_state</span> <span class="o">=</span> <span class="p">(</span>
</span><span class='line'>            <span class="n">result</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span> <span class="ow">and</span>
</span><span class='line'>            <span class="n">result</span><span class="o">.</span><span class="n">city</span> <span class="o">==</span> <span class="n">city_to_match</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">_geocode_had_matching_state</span><span class="p">:</span>
</span><span class='line'>            <span class="n">matching_states</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">result</span><span class="o">.</span><span class="n">state</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">matching_states</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Find out what states contain cities of a given name.&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">city_to_match</span> <span class="o">=</span> <span class="nb">raw_input</span><span class="p">(</span><span class="s">&#39;Please enter a city: &#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">places_to_geocode</span> <span class="o">=</span> <span class="n">build_query_locations</span><span class="p">(</span><span class="n">city_to_match</span><span class="p">)</span>
</span><span class='line'>    <span class="n">matching_states</span> <span class="o">=</span> <span class="n">find_matching_states</span><span class="p">(</span><span class="n">places_to_geocode</span><span class="p">,</span> <span class="n">city_to_match</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;Matches for </span><span class="si">%s</span><span class="s">:&#39;</span> <span class="o">%</span> <span class="n">city_to_match</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">state</span> <span class="ow">in</span> <span class="n">matching_states</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&#39;Found match in </span><span class="si">%s</span><span class="s">!&#39;</span> <span class="o">%</span> <span class="n">state</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">main</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Looks like writing our first test is easy! We can just directly test the build_query_locations method and ensure it works as we expect. Our second test should be pretty easy too, as we can create some sample responses from Google and make sure we only accept the right ones. The third test though is irritating, since it depends on us actually calling Google&#8217;s API in our test.</p>

<p>There are a few reasons this external dependency is unfortunate:</p>

<ol>
<li>It&#8217;s slow! A round trip query takes in the neighborhood of 700 ms, which means one run of our program will take on the order of half a minute. Gross.</li>
<li>It probably doesn&#8217;t need testing (by us). We generally trust Google to do the right thing. We are currently trying to unit test our own code, and where possible, we should assume that Google&#8217;s API is a thoroughly tested black box.</li>
<li>Our own testing is now more complicated. What happens if I want to test how find_matching_states handles a geocoder result that comes back as <code>None</code>? Or a city with accented characters? These are hard to generate if I&#8217;m actually calling out to my geocoding library and using the real result.</li>
</ol>


<p>This is not a comprehensive list, it&#8217;s merely three issues that apply to this particular block of code. Now imagine how these complaints scale up when you&#8217;re talking about a commercial webapp and you can start to see why mocking is so important in tests.</p>

<h3>Fine, mocking is good. How do I do it?</h3>

<p>And now we&#8217;re to the good stuff &#8211; how to mock out methods in your own tests. Gary Bernhardt wrote up a <a href="http://garybernhardt.github.com/python-mock-comparison/">comparison</a> of various mocking libraries for python, all of which would work for your purposes. Personally, I&#8217;ve stuck with the mock library and been quite happy with it.</p>

<p>So enough rambling already, let&#8217;s see this in action. I&#8217;ve written a single test below, aimed at unit testing the find_matching_states method. In particular, note how we manipulate what the <code>geocode_address</code> call returns to make our testing simple, while still asserting that we are calling the method with the arguments we expect.</p>

<figure class='code'><figcaption><span> (count_cities_test.py)</span> <a href='http://striglia.github.com/downloads/code/count_cities_test.py'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="kn">import</span> <span class="nn">count_cities</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">count_cities</span> <span class="kn">import</span> <span class="n">find_matching_states</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">mock</span> <span class="kn">import</span> <span class="n">Mock</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">mock</span> <span class="kn">import</span> <span class="n">patch</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">unittest</span> <span class="kn">import</span> <span class="n">TestCase</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">CountCitiesTestCase</span><span class="p">(</span><span class="n">TestCase</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">test_handle_none_geocoder_responses</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;Make sure find_matching_businesses doesn&#39;t break if our geocoder</span>
</span><span class='line'><span class="sd">        result is None.</span>
</span><span class='line'><span class="sd">        </span>
</span><span class='line'><span class="sd">        Also test we are calling geocode_address once per place and that we get</span>
</span><span class='line'><span class="sd">        no matches in return.</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">city_to_match</span> <span class="o">=</span> <span class="s">&#39;Buttonwillow&#39;</span>
</span><span class='line'>        <span class="n">place_to_geocode</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;</span><span class="si">%s</span><span class="s">, CA&#39;</span> <span class="o">%</span> <span class="n">city_to_match</span><span class="p">]</span>
</span><span class='line'>        <span class="c"># Inside this context manager, we&#39;ve mocked out the geocode_address</span>
</span><span class='line'>        <span class="c"># method to return None whenever it is called.</span>
</span><span class='line'>        <span class="k">with</span> <span class="n">patch</span><span class="o">.</span><span class="n">object</span><span class="p">(</span><span class="n">count_cities</span><span class="p">,</span> <span class="s">&#39;geocode_address&#39;</span><span class="p">,</span> <span class="n">new</span><span class="o">=</span><span class="n">Mock</span><span class="p">(</span><span class="n">return_value</span><span class="o">=</span><span class="bp">None</span><span class="p">)):</span>
</span><span class='line'>            <span class="n">matching_states</span> <span class="o">=</span> <span class="n">find_matching_states</span><span class="p">(</span><span class="n">place_to_geocode</span><span class="p">,</span> <span class="n">city_to_match</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># Check that we called geocode_address once per place</span>
</span><span class='line'>        <span class="k">assert</span> <span class="n">geocode_address</span><span class="o">.</span><span class="n">call_count</span> <span class="o">==</span> <span class="nb">len</span><span class="p">(</span><span class="n">places_to_geocode</span><span class="p">)</span>
</span><span class='line'>        <span class="c"># Assert we always called with what we expected</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">place</span><span class="p">,</span> <span class="p">(</span><span class="n">call_args</span><span class="p">,</span> <span class="n">call_kwargs</span><span class="p">)</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">places_to_geocode</span><span class="p">,</span> <span class="n">geocode_address</span><span class="o">.</span><span class="n">call_args_list</span><span class="p">):</span>
</span><span class='line'>            <span class="k">assert</span> <span class="n">call_args</span> <span class="o">==</span> <span class="p">(</span><span class="n">place</span><span class="p">,</span> <span class="n">city_to_match</span><span class="p">)</span>
</span><span class='line'>        <span class="c"># And just for completeness, assert that we returned no matches</span>
</span><span class='line'>        <span class="k">assert</span> <span class="n">matching_states</span> <span class="o">==</span> <span class="p">[]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that with this test, the only thing we&#8217;ve stopped testing is the content of Google responses for particular arguments to <code>geocode_address</code>. The danger (as always with mocking), is that we actually are uncertain of this response format or contents. If this were the case, we&#8217;d want to construct separate tests &#8211; only operating on the <code>geocode_address</code> method &#8211; that verified the behavior we required. But in exchange for this, we&#8217;ve replaced a 700ms call with one that takes no time, gained control over the value returned by <code>geocode_address</code> and in the case of an API like this, possibly saved ourselves real money! These are very real advantages that become even more valuable when employed at scale.</p>

<p>The simple fact is, you cannot reliably make every test an integration test at scale and &#8211; more importantly &#8211; you shouldn&#8217;t want to do so. With any luck, this post has pointed out a few advantages of mocking in your tests and explained the overall reasoning behind the choice. All that remains is to pick your library of choice and learn to use it skillfully. And that is all there is to it. There&#8217;s a ton to learn about how best to use tools like stubs and mocks in your code, but I have been repeatedly impressed by how much they have improved both the clarity and quality of my tests.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why namedtuples?]]></title>
    <link href="http://striglia.github.com/blog/2012/09/08/why-namedtuples/"/>
    <updated>2012-09-08T22:36:00-07:00</updated>
    <id>http://striglia.github.com/blog/2012/09/08/why-namedtuples</id>
    <content type="html"><![CDATA[<p>If you had asked me to explain all I knew about Python&#8217;s namedtuple class at
the start of this year, I would have probably muttered something about
mutability and trailed off into an uncomfortable silence. The fact of the
matter was, I had seen them used once or twice but never really understood the
reason they were used. Hopefully by the end of this entry I can explain at
least a couple of places you might consider using them over the typical Python
class.</p>

<!-- more -->


<p>One of my favorite ways to be introduced to any new concept is by seeing the
simplest example that still motivates its use. In the case of namedtuples, I&#8217;m
partial to the example below, which compares two proposed implementations of
a latitude/longitude coordinate &#8211; something I get a lot of experience with in
my day to day work life &#8211; and does some basic manipulation of their contents.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># The primitive approach</span>
</span><span class='line'><span class="n">lat_lng</span> <span class="o">=</span> <span class="p">(</span><span class="mf">37.78</span><span class="p">,</span> <span class="o">-</span><span class="mf">122.40</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="s">&#39;The latitude is </span><span class="si">%f</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">lat_lng</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'><span class="k">print</span> <span class="s">&#39;The longitude is </span><span class="si">%f</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">lat_lng</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="c"># The glorious namedtuple</span>
</span><span class='line'><span class="n">LatLng</span> <span class="o">=</span> <span class="n">namedtuple</span><span class="p">(</span><span class="s">&#39;LatLng&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s">&#39;latitude&#39;</span><span class="p">,</span> <span class="s">&#39;longitude&#39;</span><span class="p">])</span>
</span><span class='line'><span class="n">lat_lng</span> <span class="o">=</span> <span class="n">LatLng</span><span class="p">(</span><span class="mf">37.78</span><span class="p">,</span> <span class="o">-</span><span class="mf">122.40</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="s">&#39;The latitude is </span><span class="si">%f</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">lat_lng</span><span class="o">.</span><span class="n">latitude</span>
</span><span class='line'><span class="k">print</span> <span class="s">&#39;The longitude is </span><span class="si">%f</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">lat_lng</span><span class="o">.</span><span class="n">longitude</span>
</span></code></pre></td></tr></table></div></figure>


<p>By itself, this example is a little forced, but you can already see some benefits:</p>

<ul>
<li>increased readability of the print statements instead of cryptic indexing</li>
<li>the presence of a LatLng class that gives a clear specification (instead of the next person who comes along representing it as a dictionary with two keys, or two floats, and so on&#8230;)</li>
</ul>


<p>So you may well be asking yourself&#8230;why not just make a LatLng class?</p>

<p>An obvious question indeed. If we just stopped at the first example, you could
make a strong argument that a normal Python LatLng class with two attributes
would do everything we wanted without all this fuss. This brings us to the most
important difference between namedtuples and normal Python classes &#8211;
attributes in namedtuple subclasses are immutable once created, much like the
tuples for which the class is named.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">LatLng</span> <span class="o">=</span> <span class="n">namedtuple</span><span class="p">(</span><span class="s">&#39;LatLng&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s">&#39;latitude&#39;</span><span class="p">,</span> <span class="s">&#39;longitude&#39;</span><span class="p">])</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">lat_lng</span> <span class="o">=</span> <span class="n">LatLng</span><span class="p">(</span><span class="mf">37.78</span><span class="p">,</span> <span class="o">-</span><span class="mf">122.40</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">lat_lng</span><span class="o">.</span><span class="n">latitude</span> <span class="o">=</span> <span class="mf">9.23</span>
</span><span class='line'><span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
</span><span class='line'>  <span class="n">File</span> <span class="s">&quot;&lt;stdin&gt;&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
</span><span class='line'><span class="ne">AttributeError</span><span class="p">:</span> <span class="n">can</span><span class="s">&#39;t set attribute</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Why do I care about mutability?</h3>

<p>If you&#8217;re anything like me, you&#8217;re probably quite used to the idea of writing
highly stateful programs. Maybe you aren&#8217;t even sure why some immutable class
is the subject of this entire blog entry&#8230;all the good stuff gets done by the
smart mutation of objects anyway, right? Well let me try to convince you of the
merits of immutability with a couple examples, hard-won lessons I&#8217;ve taught
myself several times over.</p>

<p>Anyone who has spent more than a couple weeks programming Python has probably
been bitten by accidentally modifying a data structure they thought was fixed:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">totally_innocent_function</span><span class="p">(</span><span class="n">movie_list</span><span class="p">):</span>
</span><span class='line'>    <span class="n">movie_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&#39;You Got Served&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">the_best_movies_of_all_time</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;The Godfather&#39;</span><span class="p">,</span> <span class="s">&#39;Citizen Kane&#39;</span><span class="p">,</span> <span class="s">&#39;2001: A Space Odyssey&#39;</span><span class="p">]</span>
</span><span class='line'><span class="n">totally_innocent_function</span><span class="p">(</span><span class="n">the_best_movies_of_all_time</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Just because you think your data structure is properly structured and validated
doesn&#8217;t prevent a well intentioned person from later modifying it, possibly
even in a way where you don&#8217;t ever realize it happened. If you are lucky, this
gets noticed and fixed immediately. If you&#8217;re unlucky, the bug silently
festers, doing who-knows-what to your application. In my experience, the
original author and the well intentioned person who breaks the code later on
are typically both myself. Coding is complicated and allowing your data to be
mutable when you don&#8217;t want it to be can lead to trouble.</p>

<h3>And what if I need more than simple attributes?</h3>

<p>In most of my personal uses of namedtuples, I inevitably have some additional functionality I wanted from the class &#8211; often some computed result of the various attributes built into the class. Sounds an awful lot like a property right? Give something like the following a shot. You get all the benefits of knowing your core data isn&#8217;t going to be accidentally modified while also getting fancy properties on the side!</p>

<figure class='code'><figcaption><span> (namedtuple_properties.py)</span> <a href='http://striglia.github.com/downloads/code/namedtuple_properties.py'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">namedtuple</span>
</span><span class='line'>
</span><span class='line'><span class="n">CUSTOMER_FIELDS</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;name&#39;</span><span class="p">,</span> <span class="s">&#39;has_vip_membership&#39;</span><span class="p">]</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Customer</span><span class="p">(</span><span class="n">namedtuple</span><span class="p">(</span><span class="s">&#39;_Customer&#39;</span><span class="p">,</span> <span class="n">CUSTOMER_FIELDS</span><span class="p">)):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    A mini-class used to represent a person trying to get a table at an </span>
</span><span class='line'><span class="sd">    exclusive restaurant. The data is all immutable and the</span>
</span><span class='line'><span class="sd">    deserves_vip_seating property handles the hard thinking.</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="nd">@property</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">deserves_chefs_table</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;Returns True if this customer should be seated at the chef&#39;s table.&quot;&quot;&quot;</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">has_vip_membership</span> <span class="ow">or</span> <span class="bp">self</span><span class="o">.</span><span class="n">name</span> <span class="o">==</span> <span class="s">&#39;Barack Obama&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">customer_info</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span><span class="s">&#39;name&#39;</span><span class="p">:</span> <span class="s">&#39;Roger Moore&#39;</span><span class="p">,</span> <span class="s">&#39;has_vip_membership&#39;</span><span class="p">:</span> <span class="bp">False</span><span class="p">},</span>
</span><span class='line'>        <span class="p">{</span><span class="s">&#39;name&#39;</span><span class="p">:</span> <span class="s">&#39;Sean Connery&#39;</span><span class="p">,</span> <span class="s">&#39;has_vip_membership&#39;</span><span class="p">:</span> <span class="bp">True</span><span class="p">},</span>
</span><span class='line'>        <span class="p">{</span><span class="s">&#39;name&#39;</span><span class="p">:</span> <span class="s">&#39;Barack Obama&#39;</span><span class="p">,</span> <span class="s">&#39;has_vip_membership&#39;</span><span class="p">:</span> <span class="bp">False</span><span class="p">}]</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">customers</span> <span class="o">=</span> <span class="p">[</span><span class="n">Customer</span><span class="p">(</span><span class="o">**</span><span class="n">c</span><span class="p">)</span> <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">customer_info</span><span class="p">]</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">customers</span><span class="p">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">c</span><span class="o">.</span><span class="n">deserves_chefs_table</span><span class="p">:</span>
</span><span class='line'>            <span class="k">print</span> <span class="s">&quot;Send </span><span class="si">%s</span><span class="s"> to the chef&#39;s table!&quot;</span> <span class="o">%</span> <span class="n">c</span><span class="o">.</span><span class="n">name</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Everything in moderation</h3>

<p>So I hope I&#8217;ve at least suggested to you the benefits of trying out
namedtuples, for both code readability and safety. It&#8217;s certainly possible to
take this too far, but at the very least it&#8217;s an excellent way to learn a new
approach and get to investigate some of Python&#8217;s more niche features.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First things first]]></title>
    <link href="http://striglia.github.com/blog/2012/08/31/first-things-first/"/>
    <updated>2012-08-31T23:53:00-07:00</updated>
    <id>http://striglia.github.com/blog/2012/08/31/first-things-first</id>
    <content type="html"><![CDATA[<p>As all good internet citizens do eventually, I&#8217;ve decided to try writing down
my various software-related trials and tribulations down in a blog. For the
time being, I&#8217;m sticking with Octopress as I care more about the content than
the web design. Maybe later this will become an exercise in web
development&#8230;but not quite yet.</p>

<p>Expect a lot of posts where I walk through some task or tool that I&#8217;ve been
using recently. Hopefully you&#8217;ll find it interesting.</p>
]]></content>
  </entry>
  
</feed>
