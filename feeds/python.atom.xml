<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Locally Optimal - python</title><link href="http://www.locallyoptimal.com/" rel="alternate"></link><link href="http://www.locallyoptimal.com/feeds/python.atom.xml" rel="self"></link><id>http://www.locallyoptimal.com/</id><updated>2019-08-23T00:00:00-07:00</updated><subtitle>hill climbing in SF</subtitle><entry><title>Why you should use Black for your Python style linting</title><link href="http://www.locallyoptimal.com/blog/2019/08/23/why-you-should-use-black-for-your-python-style-linting/" rel="alternate"></link><published>2019-08-23T00:00:00-07:00</published><updated>2019-08-23T00:00:00-07:00</updated><author><name>Scott Triglia</name></author><id>tag:www.locallyoptimal.com,2019-08-23:/blog/2019/08/23/why-you-should-use-black-for-your-python-style-linting/</id><summary type="html">&lt;p&gt;&lt;em&gt;This was written in early 2019 as an internal proposal for why Yelp should adopt Python's Black library for style linting. The document’s style is heavily modeled after Amazon’s 6 pagers (&lt;a href="https://medium.com/@inowland/using-6-page-and-2-page-documents-to-make-organizational-decisions-3216badde909"&gt;detail here&lt;/a&gt;). It's early to declare whether that effort worked or not (though early feedback was positive …&lt;/em&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;This was written in early 2019 as an internal proposal for why Yelp should adopt Python's Black library for style linting. The document’s style is heavily modeled after Amazon’s 6 pagers (&lt;a href="https://medium.com/@inowland/using-6-page-and-2-page-documents-to-make-organizational-decisions-3216badde909"&gt;detail here&lt;/a&gt;). It's early to declare whether that effort worked or not (though early feedback was positive), but while writing this up I felt there were too few public position papers advocating for Black usage. So here's at least one more, in case it is useful to others.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Document Purpose&lt;/h2&gt;
&lt;p&gt;Decide if our various current Python style linting solutions (autopep8, pylint, flake8) should be replaced or simplified with an opinionated auto-formatter library called Black.&lt;/p&gt;
&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;Historically, we have always had a recommended Python style. Originally this was a wiki page, then various levels of &lt;a href="https://en.wikipedia.org/wiki/Lint_(software)"&gt;automated linting&lt;/a&gt; including different combinations and configurations of tools like autopep8, flake8, and pylint. &lt;/p&gt;
&lt;p&gt;There’s significant overlap within these tools, but roughly they break down into a few areas of focus:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Pycodestyle: identifies &lt;a href="https://www.python.org/dev/peps/pep-0008/"&gt;pep8&lt;/a&gt; style violations&lt;/li&gt;
&lt;li&gt;autopep8: automatically fixes most violations identified by pycodestyle&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/asottile/add-trailing-comma"&gt;Add-trailing-comma&lt;/a&gt;, a precommit hook that does various style enforcing (not just trailing commas). &lt;/li&gt;
&lt;li&gt;Pylint: throws warnings or errors for a combination of programming and style issues&lt;/li&gt;
&lt;li&gt;Pyflakes: similar to pylint, except &lt;em&gt;never&lt;/em&gt; complains about style&lt;/li&gt;
&lt;li&gt;Flake8: wraps pyflakes and pycodestyle; roughly combines the two&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Empirically, we largely seem to have standardized on the pair of flake8 and autopep8, though with lots of variation in their configuration.&lt;/p&gt;
&lt;p&gt;We use &lt;a href="https://pre-commit.com/"&gt;pre-commit&lt;/a&gt; to enforce most of these linting solutions at the time of git commit. Pre-commit itself has &lt;a href="https://pre-commit.com/hooks.html"&gt;a large set of additional optional hooks&lt;/a&gt;, many of which solve individual style problems (e.g. bad indentation). &lt;/p&gt;
&lt;p&gt;Other languages have seen a movement toward minimally configurable, autoformatting solutions: Go started it &lt;a href="https://golang.org/cmd/gofmt/"&gt;with gofmt&lt;/a&gt; and JS &lt;a href="https://prettier.io/"&gt;has prettier&lt;/a&gt;. They’ve both seen successful adoption because they are simple to use, remove formatting as a bikeshed issue, and generally let you focus on the actual code you’re writing, not manual adherence to best practices.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://black.readthedocs.io/en/stable/index.html"&gt;Python has an equivalent library called black&lt;/a&gt;. It has seen growing popularity within the Python community, including adoption and recommendation from major repos (&lt;a href="https://github.com/python-attrs/attrs/blob/master/.pre-commit-config.yaml#L2"&gt;attrs&lt;/a&gt; and &lt;a href="https://github.com/pydanny/cookiecutter-django/issues/1601"&gt;django&lt;/a&gt;) and testimonials &lt;a href="https://black.readthedocs.io/en/stable/index.html"&gt;from very experienced Python developers&lt;/a&gt;. The library bakes in opinionated enforcement of PEP8 and some additional best practices,&lt;a href="https://black.readthedocs.io/en/stable/the_black_code_style.html"&gt; explained in more detail here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Problem&lt;/h2&gt;
&lt;p&gt;We do not use black for Python and many of our current Python linting solutions present with various problems.&lt;/p&gt;
&lt;p&gt;Significant pain points with our status quo are inconsistency of configuration and manual resolution of errors. Both of these are addressed by adopting an auto-formatting linter like black.&lt;/p&gt;
&lt;h4&gt;Inconsistency&lt;/h4&gt;
&lt;p&gt;Unfortunately, we apply style linters inconsistently across our repos. Some of these happen in tox files, some in pre-commit config, some in both. &lt;/p&gt;
&lt;p&gt;Even if we agree which tools to use, each of them supports a tremendous amount of configurability (see &lt;a href="https://pypi.org/project/autopep8/#id3"&gt;autopep8&lt;/a&gt; and &lt;a href="http://flake8.pycqa.org/en/latest/user/options.html"&gt;flake8&lt;/a&gt; documentation). This produces lots of variation in practice and demands more choices about what is or isn’t best style. In practice, there is no common agreed choices for all these values.&lt;/p&gt;
&lt;p&gt;In the end, this inconsistency across repos makes collaboration, team changes, and onboarding new hires all harder than necessary. &lt;/p&gt;
&lt;h4&gt;Manual resolution of errors&lt;/h4&gt;
&lt;p&gt;As a general rule, these tools do not all consistently fix problems they identify. Autopep8 is the closest, but it is also the most narrowly scoped.&lt;/p&gt;
&lt;p&gt;Any case of linters only &lt;em&gt;identifying&lt;/em&gt; style issues leaves developers to manual resolve them, often only after an attempted &lt;code&gt;git commit&lt;/code&gt; or &lt;code&gt;make test&lt;/code&gt; fails at the last step.&lt;/p&gt;
&lt;p&gt;Some style linting issues (e.g. breaking up a long function signature) are only partially enforced by tools like flake8, resulting in lots of style nitpicks at code review time. This produces extra work for all involved and can be a source of disagreement between engineers where our style guides are unclear. &lt;/p&gt;
&lt;p&gt;Finally, the manual resolution still leaves opportunity for minor differences in actual solved states since the linters tend to only forbid the worst offences (e.g. 150 character function signature lines) instead of enforcing a consistent solution (e.g. always splitting long function signatures onto one line per argument).&lt;/p&gt;
&lt;h2&gt;Possible Solutions&lt;/h2&gt;
&lt;p&gt;Like the library it recommends, this whitepaper is opinionated -- we should standardize our various style linters and only use black. That said, there are still options for how we should go about it.&lt;/p&gt;
&lt;p&gt;The main choice seems to be around how aggressive we are about accepting black’s default configuration.&lt;/p&gt;
&lt;p&gt;Note that for a variety of non-style linting concerns, we should run flake8 after Black. From the Black documentation, this would look like a flake8 configuration of:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;flake8&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;E&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;W&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;B950&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;ignore&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;E501&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Black with default configuration&lt;/h4&gt;
&lt;p&gt;The simplest solution -- just run Black with zero configuration. This accepts all of Black’s opinions as correct and in return gives us an extremely simple setup and mental model. &lt;/p&gt;
&lt;p&gt;We can run as a pre-commit hook with only a few lines:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;    -   repo: https://github.com/ambv/black&lt;/span&gt;
&lt;span class="err"&gt;        rev: stable&lt;/span&gt;
&lt;span class="err"&gt;        hooks:&lt;/span&gt;
&lt;span class="err"&gt;        - id: black&lt;/span&gt;
&lt;span class="err"&gt;          language_version: python3.6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Black auto-detects the python version of the file under linting, so this should work in both Python 2 and 3 repos.&lt;/p&gt;
&lt;h4&gt;Black with per-repo configuration&lt;/h4&gt;
&lt;p&gt;We can also choose to roll out Black with some use of its limited configurable opinions. The most interesting of these is modifying line length and its standardization of double quotes.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;--line-length&lt;/code&gt; would allow us to alter the default of 88 character cutoff. The advantage here seems minimal (this was picked wisely, using empirical data), but it is an option to allow 120 chars or something similar.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;--skip-string-normalization&lt;/code&gt; would allow single quoted strings (instead of Black’s default of enforcing only double quotes). This is one of the most controversial opinions of Black and may be a source of strong resistance to the change. Using this flag loosens the consistency of our codebase, but may help avoid controversy with this proposal.&lt;/p&gt;
&lt;p&gt;Note that if we change these settings per repo, we’ll also need to keep flake8 config consistent. This introduces an additional slight amount of upkeep. &lt;/p&gt;
&lt;p&gt;For this option, we’d likely leave these settings to the discretion of each repo, with the encouragement being “use Black’s defaults unless you feel extremely strongly”.&lt;/p&gt;
&lt;h2&gt;Recommended Solution&lt;/h2&gt;
&lt;p&gt;Let’s use Black as a pre-commit hook with standard (default) configuration, alongside flake8 for non-style linting.&lt;/p&gt;
&lt;p&gt;The fact that Black contains some individual controversial choices (e.g. standardizing on double quotes for strings) is overwhelmed by the value of automating style nitpicks away and offering all our engineers a consistent, open-source standardized style across repos.&lt;/p&gt;
&lt;p&gt;For a more detailed argument in favor of this approach, &lt;a href="https://github.com/django/deps/blob/master/accepted/0008-black.rst"&gt;see the Django project’s reasoning for the same choice.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If it feels useful, we can also include documentation and evangelizing &lt;a href="https://black.readthedocs.io/en/stable/editor_integration.html"&gt;of native IDE integrations&lt;/a&gt; for black.&lt;/p&gt;
&lt;p&gt;Documentation should be central and include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This document explaining the motivation behind the change&lt;/li&gt;
&lt;li&gt;Links to &lt;a href="https://black.readthedocs.io/en/stable/the_black_code_style.html"&gt;https://black.readthedocs.io/en/stable/the_black_code_style.html&lt;/a&gt;, which has a FAQ for the most common questions about “why is black choosing to do this particular change”.&lt;/li&gt;
&lt;li&gt;Probably at least one external reference of choice like &lt;a href="https://www.mattlayman.com/blog/2018/python-code-black/"&gt;https://www.mattlayman.com/blog/2018/python-code-black/&lt;/a&gt; or &lt;a href="https://prettier.io/docs/en/why-prettier.html"&gt;https://prettier.io/docs/en/why-prettier.html&lt;/a&gt; which gives more context on benefits.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Proposed plan of action&lt;/h2&gt;
&lt;p&gt;Make the central wiki page described above.&lt;/p&gt;
&lt;p&gt;Select two small, low-developer-count repos and get social buy in to trial this proposal. Like most linting choices, this is not an easily reversed choice once applied but we can at least use &lt;code&gt;pre-commit run --all-files&lt;/code&gt; to apply the style changes in a single, easily identified git commit. If desired, we can make the commit as a special one-off git author to make this change more obvious when viewing git history later.&lt;/p&gt;
&lt;p&gt;If the small repo rollouts reports positive or neutral developer happiness, measured via a brief survey, we can progress wider. More general rollout should likely follow the same rollout strategy as initial repos, including any best practices learned.&lt;/p&gt;
&lt;p&gt;If all goes extremely well and momentum builds, eventually we should 1) standardize this as the standard, recommended solution, and 2) apply this same process everywhere.&lt;/p&gt;
&lt;p&gt;Anticipating a concern: &lt;a href="https://black.readthedocs.io/en/stable/installation_and_usage.html#note-this-is-a-beta-product"&gt;the current “Beta”&lt;/a&gt; disclaimer should be removed soon according to the Black maintainer (&lt;a href="https://github.com/python/black/issues/517"&gt;source&lt;/a&gt;). We’d presumably wait for this step to be official before completing any full rollout.&lt;/p&gt;
&lt;h2&gt;Appendix -- Prettier’s take on why you should use an auto-formatter&lt;/h2&gt;
&lt;p&gt;Prettier (the JS equivalent of Black) has a tremendous “why use Prettier” page explaining their philosophy and justification. It is at &lt;a href="https://prettier.io/docs/en/why-prettier.html"&gt;https://prettier.io/docs/en/why-prettier.html&lt;/a&gt;  and you are strongly recommended to read it.&lt;/p&gt;
&lt;h2&gt;Appendix -- Discussion from HN with relevant excerpts&lt;/h2&gt;
&lt;p&gt;Original discussion: &lt;a href="https://news.ycombinator.com/item?id=19939806"&gt;https://news.ycombinator.com/item?id=19939806&lt;/a&gt;. General sentiment of people who had used it long term seems positive.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://news.ycombinator.com/item?id=19942253"&gt;(source)&lt;/a&gt; I was initially grumpy about my org adopting black because I preferred single quotes, but the level of standardization is a huge win in my book. I never even think about my code style anymore, I just write it and then run black.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://news.ycombinator.com/item?id=19941182"&gt;(source)&lt;/a&gt; if the progress of prettier (js) over the past few years is any indicator of what will happen with black, there will likely be incremental improvements in black that address the poor formatting cases you’re concerned about. i remember when prettier first came out, i was not convinced until my “standard” for formatting was met. but it was met eventually.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://news.ycombinator.com/item?id=19941124"&gt;(source)&lt;/a&gt; While I agree that [this particular] formatting choice looks a little weird. The primary benefit of a formatter is that the formatting is always the same not. It's less important that it matches everyone's preferences and more important that it always formats the code the same way.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://news.ycombinator.com/item?id=19941119"&gt;(source)&lt;/a&gt; I often dislike autoformatter output too, but then I remember that while no-one likes what the autoformatter does to &lt;em&gt;their&lt;/em&gt; code, everyone likes what the autoformatter does to their coworkers' code, and then I chill out about it.&lt;/p&gt;
&lt;p&gt;Having a standard is more important than the standard being excellent.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://news.ycombinator.com/item?id=19941321"&gt;(source)&lt;/a&gt; Let me take a shot at why it's important. We spend years peering at code hunting for tiny, miniscule mistakes. Thus we're training ourselves, quite rigorously, to spot minor deviations.&lt;/p&gt;
&lt;p&gt;We're also irrational in the moment: our aesthetic sense is bothered by certain patterns, and our social sense wants to assign blame for this "wrongness" to individuals.&lt;/p&gt;
&lt;p&gt;An auto-formatter removes a ton of deviations that don't matter, and desocializes the aesthetics. This saves code reviewers time and stress and helps them focus on what actually matters in the code.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://news.ycombinator.com/item?id=19941284"&gt;(source)&lt;/a&gt; There's a tiny but existent cost that's incurred every time formatting rules that aren't diff-stable result in a noisy code review that takes longer to read, or makes it harder for reviewers to discern the real changes from the formatting junk. There's a tiny but existent cost when excess delta makes it harder to gitblame. There's a tiny but existent cost when people have to stop and think about how to format their code manually. Or when they have to stop and debate formatting. Or when they read someone else's code slightly more slowly because different formatting rules make it harder for them to skim it or rely on pattern recognition instead of careful reading to understand its structure.&lt;/p&gt;
&lt;p&gt;All those tiny little costs add up to something that's not so tiny. And it's so easy to make it just disappear, for the low low cost of swallowing one's pride, by simply adopting an opinionated autoformatter.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://news.ycombinator.com/item?id=19940767"&gt;(source)&lt;/a&gt; The way you can tell that black is good is that everyone mildly dislikes a few things about it, but they're usually different things.&lt;/p&gt;
&lt;p&gt;That's usually a good clue that you've hit real middle-ground. I blackify my projects once we hit 3 contributors.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://news.ycombinator.com/item?id=19941466"&gt;(source)&lt;/a&gt; I like auto-formatting, because it makes PRs less stressful to commit, and makes review comments more focused on stuff that actually matters. How exactly the code gets formatted is not something I care much about, just that it happens consistently, and I don't have to think about it.&lt;/p&gt;</content><category term="python"></category></entry><entry><title>"Executable python scripts via entry points"</title><link href="http://www.locallyoptimal.com/blog/2014/03/14/executable-python-scripts-via-entry-points/" rel="alternate"></link><published>2014-03-14T16:11:00-07:00</published><updated>2014-03-14T16:11:00-07:00</updated><author><name>Scott Triglia</name></author><id>tag:www.locallyoptimal.com,2014-03-14:/blog/2014/03/14/executable-python-scripts-via-entry-points/</id><summary type="html">&lt;p&gt;A quick topic -- executing a python module from the command line!&lt;/p&gt;
</summary><content type="html">&lt;p&gt;A quick topic -- executing a python module from the command line!&lt;/p&gt;


&lt;p&gt;When &lt;a href="http://locallyoptimal.com/blog/2014/03/14/building-a-basic-package-pt-1-bare-bones/"&gt;I last left&lt;/a&gt; my pet rss2sms project, it had been transformed into a basic python package. Unfortunately, this means that my old method of running &lt;code&gt;python rss2sms.py --foobar&lt;/code&gt; from the command line is not so simple anymore. In fact what I really want is to be able to just run &lt;code&gt;rss2sms --foobar&lt;/code&gt; from the command line after I install the package.&lt;/p&gt;
&lt;p&gt;Luckily python has exactly what we need in the form of setuptools's &lt;a href="http://pythonhosted.org//setuptools/setuptools.html#automatic-script-creation"&gt;console_script argument to entry_points&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let's go ahead and add it to our setup.py:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;rss2sms&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                                                             
    &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;find_version&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rss2sms&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__init__.py&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;                             

&lt;span class="c1"&gt;# ...the rest of our setup.py here....&lt;/span&gt;

    &lt;span class="n"&gt;entry_points&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;                                                              
        &lt;span class="s1"&gt;&amp;#39;console_scripts&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;                                                    
            &lt;span class="s1"&gt;&amp;#39;rss2sms=rss2sms:main&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                                             
        &lt;span class="p"&gt;],&lt;/span&gt;                                                                      
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So simple! Note that we're linking the executable &lt;code&gt;rss2sms&lt;/code&gt; here to running the python function &lt;code&gt;main&lt;/code&gt; in the &lt;code&gt;rss2sms&lt;/code&gt; module. If we look at that function, it just does the normal command line parsing and function calling that it always has.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;                                                                     
    &lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OptionParser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;                                                     
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-u&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;--url&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;rss_url&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                            
                            &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;url of rss feed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                             
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-t&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;--to&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;to_num&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                              
                            &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cell number to send sms alerts to&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;           
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-f&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;--from&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;from_num&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                          
                            &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cell number to send sms alerts to (overrides environment variable TWILIO_NUMBER)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-i&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;--id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;rss_id_field&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                        
                            &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;unique id rss field used for display in SMS and for equality comparison (defaults to &amp;#39;link&amp;#39;)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;--display&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;rss_display_field&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;              
                            &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name of rss field used for display in SMS (defaults to &amp;#39;title&amp;#39;)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-c&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;--cache-filename&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cache_filename&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;          
                            &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;optional file to cache last post in&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;         

    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;                                       
    &lt;span class="n"&gt;rss2sms&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Rss2Sms&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="nb"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;                                          
    &lt;span class="n"&gt;rss2sms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_and_alert&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now let's start up a fresh virtualenv and test it out. We can use pip's develop option to install a package by just passing it a path.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;Desktop&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;rss2sms&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;virtualenv&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;entry_point_test&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;entry_point_test&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;activate&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;New&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;executable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;entry_point_test&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;Installing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Setuptools&lt;/span&gt;&lt;span class="p"&gt;...........&lt;/span&gt;&lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;Installing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Pip&lt;/span&gt;&lt;span class="p"&gt;..................&lt;/span&gt;&lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;entry_point_test&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;Desktop&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;rss2sms&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pip&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;install&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lots&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;text&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;installation&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;entry_point_test&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;Desktop&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;rss2sms&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rss2sms&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;--help&lt;/span&gt;
&lt;span class="k"&gt;Usage&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rss2sms&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="nl"&gt;Options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;--help            show this help message and exit&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;RSS_URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;--url=RSS_URL&lt;/span&gt;
&lt;span class="w"&gt;                        &lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rss&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;feed&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TO_NUM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;--to=TO_NUM&lt;/span&gt;
&lt;span class="w"&gt;                        &lt;/span&gt;&lt;span class="n"&gt;cell&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sms&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;alerts&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;FROM_NUM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;--from=FROM_NUM&lt;/span&gt;
&lt;span class="w"&gt;                        &lt;/span&gt;&lt;span class="n"&gt;cell&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sms&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;alerts&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;overrides&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                        &lt;/span&gt;&lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;variable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TWILIO_NUMBER&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;RSS_ID_FIELD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;--id=RSS_ID_FIELD&lt;/span&gt;
&lt;span class="w"&gt;                        &lt;/span&gt;&lt;span class="k"&gt;unique&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rss&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;used&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SMS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                        &lt;/span&gt;&lt;span class="n"&gt;equality&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;comparison&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;defaults&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;link&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;RSS_DISPLAY_FIELD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;--display=RSS_DISPLAY_FIELD&lt;/span&gt;
&lt;span class="w"&gt;                        &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rss&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;used&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SMS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;defaults&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                        &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CACHE_FILENAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;--cache-filename=CACHE_FILENAME&lt;/span&gt;
&lt;span class="w"&gt;                        &lt;/span&gt;&lt;span class="n"&gt;optional&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;file&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;last&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And just like that we have an executable hooked up our python module. We can even use which to see how it works:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;entry_point_test&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;Desktop&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;rss2sms&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;which&lt;/span&gt; &lt;span class="n"&gt;rss2sms&lt;/span&gt;
&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;striglia&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Desktop&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;rss2sms&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;entry_point_test&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;rss2sms&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;entry_point_test&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;Desktop&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;rss2sms&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cat&lt;/span&gt; &lt;span class="sb"&gt;`which rss2sms`&lt;/span&gt;
&lt;span class="c1"&gt;#!/Users/striglia/Desktop/github/rss2sms/entry_point_test/bin/python            &lt;/span&gt;
&lt;span class="c1"&gt;# EASY-INSTALL-ENTRY-SCRIPT: &amp;#39;rss2sms==0.0.1&amp;#39;,&amp;#39;console_scripts&amp;#39;,&amp;#39;rss2sms&amp;#39;          &lt;/span&gt;
&lt;span class="n"&gt;__requires__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rss2sms==0.0.1&amp;#39;&lt;/span&gt;                                                 
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;                                                                      
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pkg_resources&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;load_entry_point&lt;/span&gt;                                      

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;                                                      
    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;                                                                   
        &lt;span class="n"&gt;load_entry_point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rss2sms==0.0.1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;console_scripts&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rss2sms&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)()&lt;/span&gt;         
    &lt;span class="p"&gt;)&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This executable is just a simple python module which, when we call it, uses the pkg_resources library to look up what python module our setup.py says we should call. All in all, a very painless way to distribute nice executables for your library.&lt;/p&gt;</content><category term="python"></category></entry><entry><title>"Building a basic package pt. 1: Bare Bones"</title><link href="http://www.locallyoptimal.com/blog/2014/03/14/building-a-basic-package-pt-1-bare-bones/" rel="alternate"></link><published>2014-03-14T13:44:00-07:00</published><updated>2014-03-14T13:44:00-07:00</updated><author><name>Scott Triglia</name></author><id>tag:www.locallyoptimal.com,2014-03-14:/blog/2014/03/14/building-a-basic-package-pt-1-bare-bones/</id><summary type="html">&lt;p&gt;Every once in a while I get the itch to turn some one off script I wrote into a proper package. Turns out advice on the subject is a little scattered, and if you're anything like me it can be frustrating to track down relevant posts on the entire subject. So, just for fun, let's walk through the process of taking a one-off script I wrote and making it into a nice python package, complete with isolated testing, uploading to pypi, and convenient installation.&lt;/p&gt;
&lt;p&gt;Now knowing my blogging habits, I'm splitting this into a few small posts in the hopes that I actually get through them. So lets take a current project I have and decide where to start.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Every once in a while I get the itch to turn some one off script I wrote into a proper package. Turns out advice on the subject is a little scattered, and if you're anything like me it can be frustrating to track down relevant posts on the entire subject. So, just for fun, let's walk through the process of taking a one-off script I wrote and making it into a nice python package, complete with isolated testing, uploading to pypi, and convenient installation.&lt;/p&gt;
&lt;p&gt;Now knowing my blogging habits, I'm splitting this into a few small posts in the hopes that I actually get through them. So lets take a current project I have and decide where to start.&lt;/p&gt;


&lt;h2&gt;rss2sms - a humble beginning&lt;/h2&gt;
&lt;p&gt;The project I'd like to fix up is called rss2sms and lives &lt;a href="http://www.github.com/striglia/rss2sms"&gt;on my github account&lt;/a&gt;. I originally started it back when I was house hunting in San Francisco and was getting tired of new apartments going up on Craigslist without me noticing. So I figured it was time to automate this!&lt;/p&gt;
&lt;p&gt;The code is pretty simple. At its core, it does the following steps whenever it is run:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Reads a passed RSS feed into memory (e.g. a Craigslist search)&lt;/li&gt;
&lt;li&gt;Loads the timestamp of the last post we were notified about from file&lt;/li&gt;
&lt;li&gt;Sends a text for each post newer than the timestamp to a specified number&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As a result of being fairly simple, I just threw the whole thing in one python module. In fact, I threw it in one big class! I want to clean up the implementation a little as we go on, but for now let's focus on the task of turning this into a package.&lt;/p&gt;
&lt;h2&gt;Structure&lt;/h2&gt;
&lt;p&gt;One of the easiest steps we can take toward making a package is to imitate the proper directory structure. The kind folks over at the Python Packaging Authority (aka pypa) have &lt;a href="http://python-packaging-user-guide.readthedocs.org/en/latest/index.html"&gt;assembled a user guide&lt;/a&gt; for fellow travelers on the road to packaging nirvana. Unfortunately, it is very much a work in progress and a little thin on details in my opinion.&lt;/p&gt;
&lt;p&gt;As a result, we'll mostly be mimicking the pypa's sample project, &lt;a href="https://github.com/pypa/sampleproject"&gt;found on their github&lt;/a&gt;. Let's compare our current project's structure against that.&lt;/p&gt;
&lt;p&gt;rss2sms:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;- .gitignore&lt;/span&gt;
&lt;span class="err"&gt;- README.md&lt;/span&gt;
&lt;span class="err"&gt;- rss2sms.py&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;pypa's sample project:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;- sample/&lt;/span&gt;
&lt;span class="err"&gt;- tests/&lt;/span&gt;
&lt;span class="err"&gt;- .gitignore&lt;/span&gt;
&lt;span class="err"&gt;- README.md&lt;/span&gt;
&lt;span class="err"&gt;- DESCRIPTION.rst&lt;/span&gt;
&lt;span class="err"&gt;- MANIFEST.in&lt;/span&gt;
&lt;span class="err"&gt;- setup.py&lt;/span&gt;
&lt;span class="err"&gt;- setup.cfg&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Well...looks like we need some changes. Let's walk through a couple of these and explain what they're doing.&lt;/p&gt;
&lt;p&gt;The most noticeable feature of a python package is the package directory. It will hold all the code necessary to run our package once it's installed. Let's start there and simply move our main module inside a directory named after the project. And just for fun, let's make a stub test directory that we can fill in properly later on.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;Desktop&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;rss2sms&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;st&lt;/span&gt;
&lt;span class="k"&gt;On&lt;/span&gt; &lt;span class="n"&gt;branch&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt;
&lt;span class="n"&gt;Your&lt;/span&gt; &lt;span class="n"&gt;branch&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;date&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;origin/master&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="n"&gt;Changes&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="k"&gt;committed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;use&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;git reset HEAD &amp;lt;file&amp;gt;...&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;unstage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;renamed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;    &lt;span class="n"&gt;rss2sms&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;rss2sms&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;   &lt;span class="n"&gt;tests&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Perfect. Now comparing to the sample package, the only remaining requirement is a &lt;code&gt;setup.py&lt;/code&gt; module to tell python the basic details about our package.&lt;/p&gt;
&lt;h2&gt;setup.py&lt;/h2&gt;
&lt;p&gt;As you may be aware, the history of python packaging is not particularly simple or straightforward. There are many &lt;a href="http://blog.startifact.com/posts/older/a-history-of-python-packaging.html"&gt;blog posts&lt;/a&gt;, good &lt;a href="http://pyvideo.org/video/1601/twisted-history-of-python-packaging"&gt;talks at pycon&lt;/a&gt;, and a variety of other sources to learn about the details. Some day I may even take a shot at a summary here. But for now, we're going to bypass all the history and jump straight to building a current &lt;code&gt;setup.py&lt;/code&gt; for our package.&lt;/p&gt;
&lt;p&gt;That said, let's take the &lt;a href="https://github.com/pypa/sampleproject/blob/master/setup.py"&gt;basic setup.py&lt;/a&gt; and mold it to our purposes. I've inlined our basic version below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;setuptools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;find_packages&lt;/span&gt;                                     
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;codecs&lt;/span&gt;                                                                   
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;                                                                       
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;                                                                          


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find_version&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;file_paths&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;                                                  
    &lt;span class="c1"&gt;# Open in Latin-1 so that we avoid encoding errors.                         &lt;/span&gt;
    &lt;span class="c1"&gt;# Use codecs.open for Python 2 compatibility                                &lt;/span&gt;
    &lt;span class="n"&gt;here&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;                           
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;codecs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;here&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;file_paths&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;latin1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;      
        &lt;span class="n"&gt;version_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;                                                 

    &lt;span class="c1"&gt;# The version line must have the form                                          &lt;/span&gt;
    &lt;span class="c1"&gt;# __version__ = &amp;#39;ver&amp;#39;                                                       &lt;/span&gt;
    &lt;span class="n"&gt;version_match&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;^__version__ = [&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s2"&gt;]([^&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s2"&gt;]*)[&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s2"&gt;]&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;            
                              &lt;span class="n"&gt;version_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                               
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;version_match&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;                                                           
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;version_match&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                                           
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;RuntimeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Unable to find version string.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                        


&lt;span class="c1"&gt;# Get the long description from the relevant file                               &lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;codecs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;DESCRIPTION.rst&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;                     
    &lt;span class="n"&gt;long_description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;                                                 

&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;                                                                          
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;rss2sms&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                                                             
    &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;find_version&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rss2sms&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__init__.py&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;                             
    &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;An sms alerter for updates to an rss feed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                    
    &lt;span class="n"&gt;long_description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;long_description&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                                          
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://github.com/striglia/rss2sms&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                                   
    &lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Scott Triglia&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                                                     
    &lt;span class="n"&gt;author_email&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;scott.triglia@gmail.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                                     
    &lt;span class="n"&gt;license&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;MIT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                                    

    &lt;span class="n"&gt;classifiers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;                                                               
        &lt;span class="s1"&gt;&amp;#39;Development Status :: 3 - Alpha&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                                      
        &lt;span class="s1"&gt;&amp;#39;License :: OSI Approved :: MIT License&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                               

        &lt;span class="s1"&gt;&amp;#39;Programming Language :: Python :: 2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                                  
        &lt;span class="s1"&gt;&amp;#39;Programming Language :: Python :: 2.6&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                                
        &lt;span class="s1"&gt;&amp;#39;Programming Language :: Python :: 2.7&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                                
    &lt;span class="p"&gt;],&lt;/span&gt;                                                                          
    &lt;span class="n"&gt;keywords&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rss sms alerts&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                                                  

    &lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;find_packages&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exclude&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;tests*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;                                 
    &lt;span class="n"&gt;install_requires&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;                                                          
        &lt;span class="s1"&gt;&amp;#39;feedparser&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                                                           
        &lt;span class="s1"&gt;&amp;#39;tinyurl&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                                                              
        &lt;span class="s1"&gt;&amp;#39;twilio&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                                                               
    &lt;span class="p"&gt;],&lt;/span&gt;                                                                          
    &lt;span class="n"&gt;entry_points&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;                                                              
        &lt;span class="s1"&gt;&amp;#39;console_scripts&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;                                                    
            &lt;span class="s1"&gt;&amp;#39;rss2sms=rss2sms:main&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                                             
        &lt;span class="p"&gt;],&lt;/span&gt;                                                                      
    &lt;span class="p"&gt;},&lt;/span&gt;                                                                          
&lt;span class="p"&gt;)&lt;/span&gt;                                          
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Before we move on, let's make a brief note of the &lt;code&gt;install_requires&lt;/code&gt; directive.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;install_requires=[                                                          &lt;/span&gt;
&lt;span class="err"&gt;        &amp;#39;feedparser&amp;#39;,                                                           &lt;/span&gt;
&lt;span class="err"&gt;        &amp;#39;tinyurl&amp;#39;,                                                              &lt;/span&gt;
&lt;span class="err"&gt;        &amp;#39;twilio&amp;#39;,                                                               &lt;/span&gt;
&lt;span class="err"&gt;    ],&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is where our package can specify all the other python packages it depends on to work. In my original script, I just blindly imported things and assumed they were available. In this new way, we can specify what we need and python will automatically install them when we install our package.&lt;/p&gt;
&lt;h2&gt;One last thing&lt;/h2&gt;
&lt;p&gt;And final feature I'd like to add, even though it's not in the sample package, is a Makefile. You might be wondering why we need a Makefile at all here. Truth is, we don't really need one. The project is not that complicated and we don't need to actually build any dependencies to run the code.&lt;/p&gt;
&lt;p&gt;That said, I like Makefiles as a generic interface to standard tasks for the package. In our case, I'd like there to be simple, implementation-agnostic commands to clean the project up and to run our tests.&lt;/p&gt;
&lt;p&gt;This is pretty cheap to do with a Makefile. In fact, we can add this simple Makefile to do what I just described:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;~/Desktop/github/rss2sms (master) $ cat Makefile &lt;/span&gt;
&lt;span class="c"&gt;clean:&lt;/span&gt;
&lt;span class="c"&gt;    find ./ -name &amp;quot;*.pyc&amp;quot; -delete&lt;/span&gt;
&lt;span class="c"&gt;test:&lt;/span&gt;
&lt;span class="c"&gt;    py.test tests&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nothing complicated here yet, but it gives us the room to expand later on. Note that I am using the excellent &lt;a href="http://pytest.org/latest/"&gt;py.test package&lt;/a&gt; to do my testing. I'm sure I'll talk more about how much I like it later, but you should definitely check it out in the meantime.&lt;/p&gt;
&lt;h2&gt;Wrapping Up&lt;/h2&gt;
&lt;p&gt;With that, we're basically set. We have the core package structure down, and we can try to install our package locally. Let's test it out:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;Desktop&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;rss2sms&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;virtualenv&lt;/span&gt; &lt;span class="n"&gt;venv&lt;/span&gt;
&lt;span class="k"&gt;New&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;executable&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;venv&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt;
&lt;span class="n"&gt;Installing&lt;/span&gt; &lt;span class="n"&gt;Setuptools&lt;/span&gt;&lt;span class="p"&gt;..............................................................................................................................................................................................................................&lt;/span&gt;&lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;Installing&lt;/span&gt; &lt;span class="n"&gt;Pip&lt;/span&gt;&lt;span class="p"&gt;.....................................................................................................................................................................................................................................................................................................................................&lt;/span&gt;&lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

 &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;Desktop&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;rss2sms&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="k"&gt;source&lt;/span&gt; &lt;span class="n"&gt;venv&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;activate&lt;/span&gt;

 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;venv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;Desktop&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;rss2sms&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;develop&lt;/span&gt;
 &lt;span class="n"&gt;running&lt;/span&gt; &lt;span class="n"&gt;develop&lt;/span&gt;
&lt;span class="n"&gt;running&lt;/span&gt; &lt;span class="n"&gt;egg_info&lt;/span&gt;
&lt;span class="n"&gt;writing&lt;/span&gt; &lt;span class="n"&gt;requirements&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;rss2sms&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;egg&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;requires&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;
&lt;span class="n"&gt;writing&lt;/span&gt; &lt;span class="n"&gt;rss2sms&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;egg&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;PKG&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;INFO&lt;/span&gt;
&lt;span class="n"&gt;writing&lt;/span&gt; &lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;level&lt;/span&gt; &lt;span class="k"&gt;names&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;rss2sms&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;egg&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;top_level&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;
&lt;span class="n"&gt;writing&lt;/span&gt; &lt;span class="n"&gt;dependency_links&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;rss2sms&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;egg&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dependency_links&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;
&lt;span class="n"&gt;writing&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt; &lt;span class="n"&gt;points&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;rss2sms&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;egg&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;entry_points&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;
&lt;span class="n"&gt;reading&lt;/span&gt; &lt;span class="n"&gt;manifest&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rss2sms.egg-info/SOURCES.txt&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;writing&lt;/span&gt; &lt;span class="n"&gt;manifest&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rss2sms.egg-info/SOURCES.txt&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;running&lt;/span&gt; &lt;span class="n"&gt;build_ext&lt;/span&gt;
&lt;span class="n"&gt;Creating&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;striglia&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Desktop&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;rss2sms&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;venv&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;python2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;rss2sms&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;egg&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="p"&gt;.)&lt;/span&gt;
&lt;span class="n"&gt;Adding&lt;/span&gt; &lt;span class="n"&gt;rss2sms&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;easy&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;install&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pth&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;
&lt;span class="n"&gt;Installing&lt;/span&gt; &lt;span class="n"&gt;rss2sms&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;striglia&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Desktop&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;rss2sms&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;venv&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;many&lt;/span&gt; &lt;span class="k"&gt;more&lt;/span&gt; &lt;span class="n"&gt;lines&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nb"&gt;text&lt;/span&gt; &lt;span class="n"&gt;here&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="n"&gt;Installed&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;striglia&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Desktop&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;rss2sms&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;venv&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;python2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;httplib2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;py2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;egg&lt;/span&gt;
&lt;span class="n"&gt;Finished&lt;/span&gt; &lt;span class="n"&gt;processing&lt;/span&gt; &lt;span class="n"&gt;dependencies&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;rss2sms&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Success! We have a package we can install locally, which knows about its dependencies (courtesy of setup.py) and which has very rudimentary testing and documentation. In future iterations of this series, I hope to jump into a lot of interesting topics - particularly better testing setups, simple invocations of our script from the command line, and even uploading to pypi. Until then, you can find all the code described &lt;a href="https://github.com/striglia/rss2sms/tree/v0.0.1"&gt;here on my github&lt;/a&gt;, under the tagged version 0.0.1 of rss2sms.&lt;/p&gt;</content><category term="python"></category></entry><entry><title>"There is no such thing as magic"</title><link href="http://www.locallyoptimal.com/blog/2014/03/11/there-is-no-such-thing-as-magic/" rel="alternate"></link><published>2014-03-11T22:43:00-07:00</published><updated>2014-03-11T22:43:00-07:00</updated><author><name>Scott Triglia</name></author><id>tag:www.locallyoptimal.com,2014-03-11:/blog/2014/03/11/there-is-no-such-thing-as-magic/</id><summary type="html">&lt;p&gt;Do you know my favorite fact about programming? In the end, everything is build from code and you can understand it all -- there is absolutely no magic. With enough effort, almost everything you interact with can be dug into, demystified, and explained. I know I often interact with various tools I use as if they were black boxes, either for lack of time, lack of interest, or a fear that I wouldn't understand them if I tried. But let's fight back against that.&lt;/p&gt;
&lt;p&gt;So for this post, let's understand what's going on with python's &lt;a href="http://www.virtualenv.org/"&gt;virtualenv package&lt;/a&gt;.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Do you know my favorite fact about programming? In the end, everything is build from code and you can understand it all -- there is absolutely no magic. With enough effort, almost everything you interact with can be dug into, demystified, and explained. I know I often interact with various tools I use as if they were black boxes, either for lack of time, lack of interest, or a fear that I wouldn't understand them if I tried. But let's fight back against that.&lt;/p&gt;
&lt;p&gt;So for this post, let's understand what's going on with python's &lt;a href="http://www.virtualenv.org/"&gt;virtualenv package&lt;/a&gt;.&lt;/p&gt;


&lt;h2&gt;The Basics&lt;/h2&gt;
&lt;p&gt;Let's start out simple -- the purpose and use of virtualenv. Stealing directly from the project's homepage, "virtualenv is a tool to create isolated Python environments." Well great...what good is that?&lt;/p&gt;
&lt;h3&gt;A little backstory&lt;/h3&gt;
&lt;p&gt;I'll explain by virtue of a story about my travails with scipy. If you don't know, installing scipy/numpy on OS X has historically been...challenging. Numerous system-level dependencies, old versions of numpy pre-installed on the machine both complicate what is already a non-trivial installation procedure. This leads to a ton of posts like &lt;a href="http://stackoverflow.com/questions/11517164/scipy-numpy-matplotlib-troubles-on-osx"&gt;this&lt;/a&gt; or &lt;a href="http://penandpants.com/2012/02/24/install-python/"&gt;this&lt;/a&gt; and even extensive &lt;a href="http://www.thisisthegreenroom.com/2011/installing-python-numpy-scipy-matplotlib-and-ipython-on-lion/"&gt;step-by-step guides&lt;/a&gt;. Although scipy suffers from some complications surrounding required non-python bits (like fortran compilers), the most frequent problem I've had installing is simply having conflicting versions of numpy installed.&lt;/p&gt;
&lt;p&gt;That brings us to Virtualenv, and its use case. Macs come helpfully pre-installed with an old and unhelpful version of numpy.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ python -c &lt;span class="s1"&gt;&amp;#39;import numpy; print numpy; print numpy.__version__&amp;#39;&lt;/span&gt;
&amp;lt;module &lt;span class="s1"&gt;&amp;#39;numpy&amp;#39;&lt;/span&gt; from &lt;span class="s1"&gt;&amp;#39;/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/numpy/__init__.pyc&amp;#39;&lt;/span&gt;&amp;gt;
&lt;span class="m"&gt;1&lt;/span&gt;.5.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Well that won't work well with my hope to use the (very cool) data analysis library &lt;code&gt;pandas&lt;/code&gt;. In fact, the &lt;a href="http://pandas.pydata.org/pandas-docs/stable/install.html"&gt;pandas installation page&lt;/a&gt; kindly points out that it requires numpy 1.6.1 or higher! How can we install pandas without changing the system installed version of numpy? Enter virtualenv.&lt;/p&gt;
&lt;h3&gt;Our very first virtualenv&lt;/h3&gt;
&lt;p&gt;I promised I'd start out with a quick example, so let's show how virtualenv solves our little scipy snafu in a pinch.&lt;/p&gt;
&lt;p&gt;Virtualenvs are their own little world -- by default they are entirely isolated from your system installed python packages. First lets install virtualenv (the last thing we'll need to install globally!) and set up a sample env.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt; ~  $ sudo pip install virtualenv
Downloading/unpacking virtualenv
  Running setup.py egg_info &lt;span class="k"&gt;for&lt;/span&gt; package virtualenv

    warning: no files found matching &lt;span class="s1"&gt;&amp;#39;*.egg&amp;#39;&lt;/span&gt; under directory &lt;span class="s1"&gt;&amp;#39;virtualenv_support&amp;#39;&lt;/span&gt;
    warning: no previously-included files matching &lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt; found under directory &lt;span class="s1"&gt;&amp;#39;docs/_templates&amp;#39;&lt;/span&gt;
    warning: no previously-included files matching &lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt; found under directory &lt;span class="s1"&gt;&amp;#39;docs/_build&amp;#39;&lt;/span&gt;
Installing collected packages: virtualenv
  Running setup.py install &lt;span class="k"&gt;for&lt;/span&gt; virtualenv

    warning: no files found matching &lt;span class="s1"&gt;&amp;#39;*.egg&amp;#39;&lt;/span&gt; under directory &lt;span class="s1"&gt;&amp;#39;virtualenv_support&amp;#39;&lt;/span&gt;
    warning: no previously-included files matching &lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt; found under directory &lt;span class="s1"&gt;&amp;#39;docs/_templates&amp;#39;&lt;/span&gt;
    warning: no previously-included files matching &lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt; found under directory &lt;span class="s1"&gt;&amp;#39;docs/_build&amp;#39;&lt;/span&gt;
    Installing virtualenv script to /usr/local/bin
    Installing virtualenv-2.7 script to /usr/local/bin
Successfully installed virtualenv
Cleaning up...
~  $ virtualenv my_first_env
New python executable in my_first_env/bin/python
Installing Setuptools..............................................................................................................................................................................................................................done.
Installing Pip.....................................................................................................................................................................................................................................................................................................................................done.
~  $ &lt;span class="nb"&gt;source&lt;/span&gt; my_first_env/bin/activate
&lt;span class="o"&gt;(&lt;/span&gt;my_first_env&lt;span class="o"&gt;)&lt;/span&gt; ~  $ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt;
hello world
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Excellent! We installed virtualenv on our system using pip, created a virtualenv called &lt;code&gt;my_first_env&lt;/code&gt;, and finally activated it. This means that python is now entirely isolated from system packages. Let's prove it to ourselves by trying to import some packages we know are installed on this machine.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;(&lt;/span&gt;my_first_env&lt;span class="o"&gt;)&lt;/span&gt; ~  $ python -c &lt;span class="s1"&gt;&amp;#39;import pytz; print pytz&amp;#39;&lt;/span&gt;
Traceback &lt;span class="o"&gt;(&lt;/span&gt;most recent call last&lt;span class="o"&gt;)&lt;/span&gt;:
  File &lt;span class="s2"&gt;&amp;quot;&amp;lt;string&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;1&lt;/span&gt;, in &amp;lt;module&amp;gt;
ImportError: No module named pytz
&lt;span class="o"&gt;(&lt;/span&gt;my_first_env&lt;span class="o"&gt;)&lt;/span&gt; ~  $ python -c &lt;span class="s1"&gt;&amp;#39;import numpy; print numpy&amp;#39;&lt;/span&gt;
Traceback &lt;span class="o"&gt;(&lt;/span&gt;most recent call last&lt;span class="o"&gt;)&lt;/span&gt;:
  File &lt;span class="s2"&gt;&amp;quot;&amp;lt;string&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;1&lt;/span&gt;, in &amp;lt;module&amp;gt;
ImportError: No module named numpy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And we can also test the same commands outside our virtualenv to confirm they work!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;(&lt;/span&gt;my_first_env&lt;span class="o"&gt;)&lt;/span&gt; ~  $ deactivate
 ~  $ python -c &lt;span class="s1"&gt;&amp;#39;import pytz; print pytz&amp;#39;&lt;/span&gt;
&amp;lt;module &lt;span class="s1"&gt;&amp;#39;pytz&amp;#39;&lt;/span&gt; from &lt;span class="s1"&gt;&amp;#39;/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/pytz/__init__.pyc&amp;#39;&lt;/span&gt;&amp;gt;
 ~  $ &lt;span class="nb"&gt;source&lt;/span&gt; my_first_env/bin/activate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Interesting. And how about installing that fresh new package we had our eyes on?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;(&lt;/span&gt;my_first_env&lt;span class="o"&gt;)&lt;/span&gt; ~  $ pip install pandas
Downloading/unpacking pandas
  Downloading pandas-0.12.0.tar.gz &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.2MB&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;3&lt;/span&gt;.2MB downloaded

-----&lt;span class="o"&gt;(&lt;/span&gt;it continues &lt;span class="k"&gt;for&lt;/span&gt; a &lt;span class="k"&gt;while&lt;/span&gt; installing various dependencies&lt;span class="o"&gt;)&lt;/span&gt;-----

Successfully installed pandas python-dateutil pytz six
Cleaning up...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And there we go! We can now happily play around with all of the installed packages inside of our virtual environment and we did it without affecting any other users of this computer, or requiring global install privileges.&lt;/p&gt;
&lt;h2&gt;Well that was magical&lt;/h2&gt;
&lt;p&gt;If you're anything like me, your natural first reaction to a new tool like this is to feel a little uncomfortable. You can go through the motions (perhaps copying from some tutorial you found on a blog) and hope things will still work, but there's no real understanding of how this new tools works. Maybe you even resign yourself to never understanding something and just keep using it the way you were taught, effectively becoming a &lt;a href="http://en.wikipedia.org/wiki/Cargo_cult_programming"&gt;cargo cult programmer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Avoiding that behavior is exactly the point of this blogpost, and I think it's perhaps &lt;strong&gt;the&lt;/strong&gt; most powerful skill for any programmer. Digging into an unfamiliar project and building a mental model of how it works is the essence of programming! If you truly understand how something is put together, you can modify it, improve it, or explain it with ease.&lt;/p&gt;
&lt;p&gt;So for the rest of this post, let's dig in and prove virtualenv isn't magic. We will both be taking this journey together, as I've never dug into its guts either. So let's see what we can figure out.&lt;/p&gt;
&lt;h2&gt;Going to the source&lt;/h2&gt;
&lt;p&gt;So lets crack open &lt;code&gt;virtualenv&lt;/code&gt; and understand what's actually happening.&lt;/p&gt;
&lt;p&gt;There are three main scripts we keep calling to create, activate, and deactivate a virtualenv -- &lt;code&gt;virtualenv&lt;/code&gt;, &lt;code&gt;venv/bin/activate&lt;/code&gt; and &lt;code&gt;deactivate&lt;/code&gt;. Let's deal with creating the environment with &lt;code&gt;virtualenv&lt;/code&gt; before jumping into activation/deactivation.&lt;/p&gt;
&lt;h3&gt;Creating a virtualenv&lt;/h3&gt;
&lt;p&gt;Opening up the file at &lt;code&gt;which virtualenv&lt;/code&gt; drops me into the source:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/usr/bin/python                                                               &lt;/span&gt;
&lt;span class="c1"&gt;# EASY-INSTALL-ENTRY-SCRIPT: &amp;#39;virtualenv==1.10.1&amp;#39;,&amp;#39;console_scripts&amp;#39;,&amp;#39;virtualenv&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;__requires__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;virtualenv==1.10.1&amp;#39;&lt;/span&gt;                                             
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;                                                                      
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pkg_resources&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;load_entry_point&lt;/span&gt;                                      

&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;                                                                       
   &lt;span class="n"&gt;load_entry_point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;virtualenv==1.10.1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;console_scripts&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;virtualenv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)()&lt;/span&gt;       
&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Well that's not very helpful. Looks like running &lt;code&gt;virtualenv&lt;/code&gt; is actually just executing this bit of code. Time to see if we can figure out what &lt;code&gt;load_entry_point&lt;/code&gt; is and what it is actually calling.&lt;/p&gt;
&lt;p&gt;A little googling later, we find &lt;a href="http://stackoverflow.com/a/9615473"&gt;this SO post&lt;/a&gt; on the subject. Looks like in nice python packages, entry points are defined in &lt;code&gt;setup.py&lt;/code&gt; and automatically linked to runnable scripts at installation time. We can download the source from &lt;a href="https://pypi.python.org/pypi/virtualenv"&gt;pypi&lt;/a&gt; and take a look ourselves.&lt;/p&gt;
&lt;p&gt;Sure enough, when we open up &lt;code&gt;setup.py&lt;/code&gt; we see the entry_point dict we were promised:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;setup_params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;                                                            
    &lt;span class="s1"&gt;&amp;#39;entry_points&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;                                                       
        &lt;span class="s1"&gt;&amp;#39;console_scripts&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;                                                
            &lt;span class="s1"&gt;&amp;#39;virtualenv=virtualenv:main&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                                   
            &lt;span class="s1"&gt;&amp;#39;virtualenv-&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;.&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;=virtualenv:main&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;version_info&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;          
        &lt;span class="p"&gt;],&lt;/span&gt;                                                                  
    &lt;span class="p"&gt;},&lt;/span&gt;                                                                      
    &lt;span class="s1"&gt;&amp;#39;zip_safe&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                                                      
    &lt;span class="s1"&gt;&amp;#39;test_suite&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;nose.collector&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                                         
    &lt;span class="s1"&gt;&amp;#39;tests_require&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;nose&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Mock&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;                                      
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Indeed they seem to be linking the runnable &lt;code&gt;virtualenv&lt;/code&gt; python script to the &lt;code&gt;main&lt;/code&gt; function of virtualenv.py. Let's see what that looks like. The content of the main function appears to roughly follow these steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Build an option parser with &lt;code&gt;optparse&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Check if the script was called with the &lt;code&gt;--python&lt;/code&gt; interpreter option and possibly exit.&lt;/li&gt;
&lt;li&gt;Take actions based on various command line options&lt;/li&gt;
&lt;li&gt;Call the &lt;code&gt;create_environment&lt;/code&gt; method!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Well now that last one sounds quite relevant! Here's the full text of the create_environment method:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_environment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;home_dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;site_packages&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;clear&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                                   
                       &lt;span class="n"&gt;unzip_setuptools&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                                                       
                       &lt;span class="n"&gt;prompt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;search_dirs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;never_download&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                          
                       &lt;span class="n"&gt;no_setuptools&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;no_pip&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;symlink&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;                             
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;                                                                                              &lt;/span&gt;
&lt;span class="sd"&gt;    Creates a new environment in ``home_dir``.                                                       &lt;/span&gt;

&lt;span class="sd"&gt;    If ``site_packages`` is true, then the global ``site-packages/``                                 &lt;/span&gt;
&lt;span class="sd"&gt;    directory will be on the path.                                                                   &lt;/span&gt;

&lt;span class="sd"&gt;    If ``clear`` is true (default False) then the environment will                                   &lt;/span&gt;
&lt;span class="sd"&gt;    first be cleared.                                                                                &lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;                                                                                              
    &lt;span class="n"&gt;home_dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lib_dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inc_dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bin_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;path_locations&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;home_dir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                                   

    &lt;span class="n"&gt;py_executable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;install_python&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;                                                  
        &lt;span class="n"&gt;home_dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lib_dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inc_dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bin_dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                                                         
        &lt;span class="n"&gt;site_packages&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;site_packages&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;clear&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;symlink&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;symlink&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;                                  

    &lt;span class="n"&gt;install_distutils&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;home_dir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                                                                      

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;no_setuptools&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;                                                                            
        &lt;span class="n"&gt;install_sdist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Setuptools&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;setuptools-*.tar.gz&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;py_executable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;search_dirs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;               
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;no_pip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;                                                                               
            &lt;span class="n"&gt;install_sdist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Pip&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pip-*.tar.gz&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;py_executable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;search_dirs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                         

    &lt;span class="n"&gt;install_activate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;home_dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bin_dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prompt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we're getting somewhere! It looks like the basic steps are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Get a bunch of path locations based on the &lt;code&gt;home_dir&lt;/code&gt; path&lt;/li&gt;
&lt;li&gt;Install python inside our environment and return a path to the executable&lt;/li&gt;
&lt;li&gt;Install some subset of &lt;code&gt;distutils&lt;/code&gt;, &lt;code&gt;setuptools&lt;/code&gt; and &lt;code&gt;pip&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Install the &lt;code&gt;activate&lt;/code&gt; scripts into this new virtualenv&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And that's the essence of what running &lt;code&gt;virtualenv&lt;/code&gt; does: it defines paths for the interpreter, libraries and binaries; installs the interpreter and installation-related python packages; and it installs the &lt;code&gt;activate&lt;/code&gt; script so you can activate it. And we now understand what goes into creating a new virtualenv.&lt;/p&gt;
&lt;h3&gt;Activating and Deactivating&lt;/h3&gt;
&lt;p&gt;So that leaves the question of what &lt;code&gt;activate&lt;/code&gt; and &lt;code&gt;deactivate&lt;/code&gt; are up to. We can inspect the activate script easily enough by running &lt;code&gt;vim my_first_env/bin/activate&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The first thing we notice is that a bash function &lt;code&gt;deactivate&lt;/code&gt; is defined immediately. We'll get back to this later in this section, but this is actually the definition of the &lt;code&gt;deactivate&lt;/code&gt; method we call to leave the virtualenv. The relevant lines are so brief, you might miss them entirely:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;_OLD_VIRTUAL_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$PATH&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;                                                       
&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$VIRTUAL_ENV&lt;/span&gt;&lt;span class="s2"&gt;/bin:&lt;/span&gt;&lt;span class="nv"&gt;$PATH&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;                                                   
&lt;span class="nb"&gt;export&lt;/span&gt; PATH
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that we're saving the old &lt;code&gt;PATH&lt;/code&gt; and making a new one, with our local virtualenv prepended! This means that the next time we run &lt;code&gt;python&lt;/code&gt;, we'll get the interpreter we installed into our virtualenv, which is pointed at all our own libraries instead of the default system-installed interpreter. With that in mind, let's look at the &lt;code&gt;deactivate&lt;/code&gt; function.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;deactivate &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;                                                                 
    &lt;span class="nb"&gt;unset&lt;/span&gt; pydoc                                                                 

    &lt;span class="c1"&gt;# reset old environment variables                                           &lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -n &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$_OLD_VIRTUAL_PATH&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;                                       
        &lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$_OLD_VIRTUAL_PATH&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;                                               
        &lt;span class="nb"&gt;export&lt;/span&gt; PATH                                                             
        &lt;span class="nb"&gt;unset&lt;/span&gt; _OLD_VIRTUAL_PATH                                                 
    &lt;span class="k"&gt;fi&lt;/span&gt;                                                                          
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -n &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$_OLD_VIRTUAL_PYTHONHOME&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;                                 
        &lt;span class="nv"&gt;PYTHONHOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$_OLD_VIRTUAL_PYTHONHOME&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;                                   
        &lt;span class="nb"&gt;export&lt;/span&gt; PYTHONHOME                                                       
        &lt;span class="nb"&gt;unset&lt;/span&gt; _OLD_VIRTUAL_PYTHONHOME                                           
    &lt;span class="k"&gt;fi&lt;/span&gt;                                                                          

    &lt;span class="c1"&gt;# This should detect bash and zsh, which have a hash command that must      &lt;/span&gt;
    &lt;span class="c1"&gt;# be called to get it to forget past commands.  Without forgetting          &lt;/span&gt;
    &lt;span class="c1"&gt;# past commands the $PATH changes we made may not be respected              &lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -n &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$BASH&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; -o -n &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$ZSH_VERSION&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;                               
        &lt;span class="nb"&gt;hash&lt;/span&gt; -r &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;/dev/null                                                     
    &lt;span class="k"&gt;fi&lt;/span&gt;                                                                          

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -n &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$_OLD_VIRTUAL_PS1&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;                                        
        &lt;span class="nv"&gt;PS1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$_OLD_VIRTUAL_PS1&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;                                                 
        &lt;span class="nb"&gt;export&lt;/span&gt; PS1                                                              
        &lt;span class="nb"&gt;unset&lt;/span&gt; _OLD_VIRTUAL_PS1                                                  
    &lt;span class="k"&gt;fi&lt;/span&gt;                                                                          

    &lt;span class="nb"&gt;unset&lt;/span&gt; VIRTUAL_ENV                                                           
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; ! &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;nondestructive&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;                                     
    &lt;span class="c1"&gt;# Self destruct!                                                            &lt;/span&gt;
        &lt;span class="nb"&gt;unset&lt;/span&gt; -f deactivate                                                     
    &lt;span class="k"&gt;fi&lt;/span&gt;                                                                          
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The important part here is the resetting of old environment variables (notably &lt;code&gt;PATH&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;You can notice other details in this file, like the setting/unsetting of your &lt;a href="http://www.cyberciti.biz/tips/howto-linux-unix-bash-shell-setup-prompt.html"&gt;shell prompt&lt;/a&gt; to include the name of the currently active virtualenv.&lt;/p&gt;
&lt;p&gt;And that's it -- you've uncovered the basics of how virtualenv works!&lt;/p&gt;
&lt;h2&gt;Just the beginning&lt;/h2&gt;
&lt;p&gt;Just like that, we've taken a nontrivial tool and pulled it apart into understandable pieces. I certainly didn't understand every part of what we found immediately (and that's perfectly okay and expected!), but through some persistent searching and effort, it all makes sense. And every time I go through this process with a new tool, I find myself understanding more and more of what is going on, and gaining greater familiarity with various python tools.&lt;/p&gt;
&lt;p&gt;On the subject of virtualenv in particular, I've since discovered &lt;a href="http://blip.tv/pycon-us-videos-2009-2010-2011/pycon-2011-reverse-engineering-ian-bicking-s-brain-inside-pip-and-virtualenv-4899496"&gt;this excellent overview of the its guts&lt;/a&gt; from PyCon 2011. Take a look if you're interested in even more detail on the subject (like why does using a particular python interpreter change where I look up system packages).&lt;/p&gt;
&lt;p&gt;So go find something you don't understand! I've been elbow deep in learning the various horrors of python packaging lately, so perhaps I'll continue this series with a look into some aspect of that. Either way, I hope I've encouraged you to not be afraid of jumping into unfamiliar territory and transforming code from mysterious to understood.&lt;/p&gt;</content><category term="python"></category></entry><entry><title>"Elegant n-gram generation in Python"</title><link href="http://www.locallyoptimal.com/blog/2013/01/20/elegant-n-gram-generation-in-python/" rel="alternate"></link><published>2013-01-20T12:51:00-08:00</published><updated>2013-01-20T12:51:00-08:00</updated><author><name>Scott Triglia</name></author><id>tag:www.locallyoptimal.com,2013-01-20:/blog/2013/01/20/elegant-n-gram-generation-in-python/</id><summary type="html">&lt;p&gt;A quick few snippets of code today -- solving how to compactly and elegantly generate n-grams from your favorite iterable.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;A quick few snippets of code today -- solving how to compactly and elegantly generate n-grams from your favorite iterable.&lt;/p&gt;


&lt;p&gt;For starters, let's talk about generating all bigrams from a python list (or anything we can iterate over). We'll write it generally so it can work over lists, strings, or whatever else you care to make iterable. Finally, I'll show the more general extension at the end.&lt;/p&gt;
&lt;h2&gt;The obvious way&lt;/h2&gt;
&lt;p&gt;So our first shot here can be done with a single walk through our list:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;input_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;all&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;this&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;happened&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;more&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;or&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;less&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find_bigrams&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input_list&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;bigram_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;bigram_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;input_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;input_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;bigram_list&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You could easily suggest that this for loop may be better written with zip() instead of just range(), but the basic idea would be the same -- iterate over each element and manually combine it with the one directly following it.&lt;/p&gt;
&lt;p&gt;One thing I will mention here is that I'm not counting the first or last terms in their own bigrams (i.e. there is no bigram created that ends with 'all' or starts with 'less'). There are variations we could create that would include such bigrams (usually using some sort of padding value for the missing terms) but I will ignore them for the remainder of this discussion.&lt;/p&gt;
&lt;p&gt;So we have the minimal python code to create the bigrams, but it feels very low-level for python…more like a loop written in C++ than in python. Let's change that.&lt;/p&gt;
&lt;h2&gt;Slicing and Zipping&lt;/h2&gt;
&lt;p&gt;Let's take advantage of python's &lt;a href="http://docs.python.org/2/library/functions.html#zip"&gt;zip builtin&lt;/a&gt; to build our bigrams. Zip takes a list of iterables and constructs a new list of tuples where the first list contains the first elements of the inputs, the second list contains the second elements of the inputs, and so on. Given this fact, it will construct our bigrams for us if we can just pass it two lists that contain the first and second elements of each bigram.&lt;/p&gt;
&lt;p&gt;In fact, a little thought shows us that we can do this by simply passing in our original &lt;code&gt;input_list&lt;/code&gt; once normally and once offset by one element. This gives us our second version of &lt;code&gt;find_bigrams&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;input_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;all&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;this&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;happened&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;more&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;or&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;less&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find_bigrams&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input_list&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input_list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;input_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Hey now that is something you can show off around the office!&lt;/p&gt;
&lt;h2&gt;Generalizing&lt;/h2&gt;
&lt;p&gt;Okay but seriously, let's not get too excited. We still need to pass in a bunch of arguments to zip(), arguments which will have to change if we want to do anything but generate bigrams. So let's fix that. What if we want to generate n-grams from a list and we wish to cleanly do that in a general way?&lt;/p&gt;
&lt;p&gt;If we write out what our zip() invocation looks like for various n-grams, we see a pattern:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Bigrams&lt;/span&gt;
&lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input_list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;input_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:])&lt;/span&gt;
&lt;span class="c1"&gt;# Trigrams&lt;/span&gt;
&lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input_list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;input_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:],&lt;/span&gt; &lt;span class="n"&gt;input_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:])&lt;/span&gt;
&lt;span class="c1"&gt;# and so on&lt;/span&gt;
&lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input_list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;input_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:],&lt;/span&gt; &lt;span class="n"&gt;input_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:],&lt;/span&gt; &lt;span class="n"&gt;input_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Notice the pattern? If we could construct those arguments programmatically, just given the N we want to generate n-grams for, we'd be all set! So let's do that. We're going to leverage two things -- list comprehensions and the &lt;code&gt;*&lt;/code&gt; operator to build up our arguments.&lt;/p&gt;
&lt;p&gt;We can easily write a list comprehension to build up the list of inputs - &lt;code&gt;[input_list[i:] for i in range(n)]&lt;/code&gt;. After we've done this, we need to take a list of arguments and unlist them. This is the exact purpose of the underused &lt;code&gt;*&lt;/code&gt; operator in python. It is perfect for our purpose, taking a list and passing all elements into a function call.&lt;/p&gt;
&lt;p&gt;And now we have all our ingredients organized for our general find_ngram method.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;input_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;all&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;this&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;happened&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;more&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;or&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;less&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find_ngrams&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input_list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;input_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And there you go! It is worth noting that this is probably a suggestion too clever for it's own good…but it's also a great opportunity to practice the application of list comprehensions and the itertools module. Happy hacking!&lt;/p&gt;</content><category term="python"></category></entry><entry><title>"Hiding complexity with Context Managers"</title><link href="http://www.locallyoptimal.com/blog/2012/10/21/hiding-complexity-with-context-managers/" rel="alternate"></link><published>2012-10-21T14:53:00-07:00</published><updated>2012-10-21T14:53:00-07:00</updated><author><name>Scott Triglia</name></author><id>tag:www.locallyoptimal.com,2012-10-21:/blog/2012/10/21/hiding-complexity-with-context-managers/</id><summary type="html">&lt;p&gt;Very reliably, my favorite part of programming is the simple process of taking a series of steps that I used to have to do by hand and packaging it up in a nice, reusable form. It's pretty wonderful that it remains just as rewarding now as it did when I wrote my first function in C++ 8 years ago.&lt;/p&gt;
&lt;p&gt;So in that spirit, I figured I'd write down a few thoughts on python's context managers -- the latest built-in feature that I've grown quite attached to. &lt;/p&gt;
</summary><content type="html">&lt;p&gt;Very reliably, my favorite part of programming is the simple process of taking a series of steps that I used to have to do by hand and packaging it up in a nice, reusable form. It's pretty wonderful that it remains just as rewarding now as it did when I wrote my first function in C++ 8 years ago.&lt;/p&gt;
&lt;p&gt;So in that spirit, I figured I'd write down a few thoughts on python's context managers -- the latest built-in feature that I've grown quite attached to. &lt;/p&gt;


&lt;h2&gt;The basics&lt;/h2&gt;
&lt;p&gt;Context managers are, at their most basic, blocks of code which do something when they are entered and exited. You can see the full description of them in the excellent &lt;a href="http://docs.python.org/reference/datamodel.html#context-managers"&gt;python docs page&lt;/a&gt; or &lt;a href="http://www.python.org/dev/peps/pep-0343/"&gt;PEP 343&lt;/a&gt;. Suffice it to say, they execute code when their &lt;code&gt;with&lt;/code&gt; block is entered and exited, allowing nice convenience methods to exist. An excellent (built in!) example is reading from a file while making sure to close it again at the end…in fact you likely have used this already once or twice.&lt;/p&gt;
&lt;p&gt;Old and busted:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;input_file = open(&amp;#39;config.txt&amp;#39;, &amp;#39;r&amp;#39;)&lt;/span&gt;
&lt;span class="err"&gt;print input_file.read()&lt;/span&gt;
&lt;span class="err"&gt;input_file.close()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nice and convenient:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;with open(&amp;#39;config.txt&amp;#39;, &amp;#39;r) as input_file:&lt;/span&gt;
&lt;span class="err"&gt;    print input_file.read()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Behind the scenes, the &lt;code&gt;with&lt;/code&gt; statement is opening the file, binding the file object to the input_file variable, and then closing the file again after we exit the code block. Nothing complicated at all, but this provides a very nice tool for creating really pretty contexts that can do a lot of the heavy lifting behind the scenes.&lt;/p&gt;
&lt;h2&gt;Writing our own&lt;/h2&gt;
&lt;p&gt;So that's the basic idea, but the natural next step is wanting to write one of your own! You can consult the python docs to learn how to set up your own context manager class, but I prefer leveraging a simpler approach where possible.&lt;/p&gt;
&lt;p&gt;Our secret is going to be &lt;code&gt;contextlib&lt;/code&gt;'s &lt;code&gt;contextmanager&lt;/code&gt; decorator. Using it is as simple as decorating an appropriate function with &lt;code&gt;@contextmanager&lt;/code&gt;. Let's write a toy example to show off the various parts of flow through a context manager.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;contextlib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;contextmanager&lt;/span&gt;

&lt;span class="nd"&gt;@contextmanager&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;our_toy_context_manager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;enter_msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exit_msg&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;enter_msg&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;returned value!&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;exit_msg&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;our_toy_context_manager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;entering!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;exiting!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;inner_msg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;inner_msg&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When run, this produces:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;~/Desktop  $ python toy_context_manager.py &lt;/span&gt;
&lt;span class="err"&gt;entering!&lt;/span&gt;
&lt;span class="err"&gt;returned value!&lt;/span&gt;
&lt;span class="err"&gt;exiting!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's dive into how this decorator works. Keep in mind we can separate context managers into "before" and "after" blocks of code.&lt;/p&gt;
&lt;p&gt;The first thing to notice is the &lt;code&gt;yield&lt;/code&gt; statement in &lt;code&gt;our_toy_context_manager&lt;/code&gt;. This yield marks the point where our context manager is done with the "before" portion of its code and returns an object to the calling code. In particular, when we write something like &lt;code&gt;with foo() as bar:&lt;/code&gt;, the &lt;code&gt;bar&lt;/code&gt; variable will refer to whatever is returned by this yield. In our example, the value returned is a string and it gets referred to by the &lt;code&gt;inner_msg&lt;/code&gt; variable, and summarily printed.&lt;/p&gt;
&lt;p&gt;After we are done executing the code inside our with context, we now return to &lt;code&gt;our_toy_context_manager&lt;/code&gt; and execute the remaining code after the yield. And that's it! So while this example is quite contrived, you can see how easy it is to construct your own context managers that do something less trivial. In fact, let's try just that.&lt;/p&gt;
&lt;h2&gt;The big leagues&lt;/h2&gt;
&lt;p&gt;In the spirit of my recent preoccupation with effectively testing larger systems, let's assume that we have a moderately complicated &lt;code&gt;Frobinator&lt;/code&gt; object. Moreover, this object is used by a lot of other systems, and our corporate overlords have decreed that we must make a method available for easily mocking out calls to the &lt;code&gt;Frobinator.frobinate&lt;/code&gt; method and specifying the return value.&lt;/p&gt;
&lt;p&gt;You and I, being the knowledgeable stewards of the &lt;code&gt;Frobinator&lt;/code&gt; that we are, know that there are significant complications involved in setting up a proper mock for testing, including limiting some logging that happens on every request and disabling some built in caching infrastructure. So we have our work cut out for us. Luckily, context managers nicely compliment the setup, assert, teardown format of mocks in tests. In our case, we need to set up a valid &lt;code&gt;Frobinator&lt;/code&gt;, while simultaneously disabling caching and silencing logging. &lt;/p&gt;
&lt;p&gt;Our game plan is to construct a context manager called &lt;code&gt;mock_frobinator&lt;/code&gt; which will have already disabled logging and caching, and will be a mock.Mock instance on the &lt;code&gt;frobinate&lt;/code&gt; method so consumers can do any asserting they want on the testing side. Last but not least, we will set up our context manager to take a &lt;code&gt;results&lt;/code&gt; variable as an argument and that will be set to be the return value of &lt;code&gt;Frobinator.frobinate&lt;/code&gt; whenever it is called. So let's gather what we've learned so far and write this.&lt;/p&gt;
&lt;p&gt;Or if you prefer, just look below =)&lt;/p&gt;
&lt;p&gt;``` lang:python
from mock import Mock
from mock import patch
from contextlib import contextmanager&lt;/p&gt;
&lt;p&gt;@contextmanager
def mock_frobinator(results):
    """A mocked Frobinate object for convenient testing.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;Patches&lt;/span&gt; &lt;span class="k"&gt;out&lt;/span&gt; &lt;span class="k"&gt;both&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;caching&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;simplify&lt;/span&gt; &lt;span class="n"&gt;execution&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="n"&gt;Yields&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;Mock&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;frobinate&lt;/span&gt; &lt;span class="k"&gt;method&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="n"&gt;Args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;always&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;calling&lt;/span&gt; &lt;span class="n"&gt;Frobinator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;frobinate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="ss"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;frobinator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Frobinator&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;mocked_frobinate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;return_value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frobinator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;frobinate&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mocked_frobinate&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frobinator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;get_cached_results&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;return_value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
            &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frobinator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;write_to_log&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;()):&lt;/span&gt;
                &lt;span class="n"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;mocked_frobinate&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == '&lt;strong&gt;main&lt;/strong&gt;':
    results = []
    with mock_frobinator(results) as mocked_frobinate:
        assert mocked_frobinate.call_count == 0
        res = mocked_frobinate()
        assert mocked_frobinate.call_count == 1
        assert res == results
```&lt;/p&gt;
&lt;p&gt;And just like that, we have a fairly complicated testing fixture hidden away from view, and a nice, convenient context manager exposed for others to use. And if we need to change what we're mocking out, or even disable a new part of the Frobinator, we can do it in a single place instead of every test which uses it.&lt;/p&gt;
&lt;h2&gt;Final thoughts&lt;/h2&gt;
&lt;p&gt;Context managers are a great tool…not least of all because they provide a new metaphor (enter, do stuff, exit) for you to use where it makes the most sense. And after all that's the real benefit of diving into all these python standard library modules -- the more tricks you have up your sleeve, the better you can pick and choose the right tool for each job.&lt;/p&gt;</content><category term="python"></category></entry><entry><title>"Why namedtuples?"</title><link href="http://www.locallyoptimal.com/blog/2012/09/08/why-namedtuples/" rel="alternate"></link><published>2012-09-08T22:36:00-07:00</published><updated>2012-09-08T22:36:00-07:00</updated><author><name>Scott Triglia</name></author><id>tag:www.locallyoptimal.com,2012-09-08:/blog/2012/09/08/why-namedtuples/</id><summary type="html">&lt;p&gt;If you had asked me to explain all I knew about Python's namedtuple class at
the start of this year, I would have probably muttered something about
mutability and trailed off into an uncomfortable silence. The fact of the
matter was, I had seen them used once or twice but never really understood the
reason they were used. Hopefully by the end of this entry I can explain at
least a couple of places you might consider using them over the typical Python
class.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;If you had asked me to explain all I knew about Python's namedtuple class at
the start of this year, I would have probably muttered something about
mutability and trailed off into an uncomfortable silence. The fact of the
matter was, I had seen them used once or twice but never really understood the
reason they were used. Hopefully by the end of this entry I can explain at
least a couple of places you might consider using them over the typical Python
class.&lt;/p&gt;


&lt;p&gt;One of my favorite ways to be introduced to any new concept is by seeing the
simplest example that still motivates its use. In the case of namedtuples, I'm
partial to the example below, which compares two proposed implementations of
a latitude/longitude coordinate -- something I get a lot of experience with in
my day to day work life -- and does some basic manipulation of their contents.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# The primitive approach&lt;/span&gt;
&lt;span class="n"&gt;lat_lng&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;37.78&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;122.40&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;The latitude is &lt;/span&gt;&lt;span class="si"&gt;%f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;lat_lng&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;The longitude is &lt;/span&gt;&lt;span class="si"&gt;%f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;lat_lng&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# The glorious namedtuple&lt;/span&gt;
&lt;span class="n"&gt;LatLng&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;namedtuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;LatLng&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;latitude&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;longitude&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;lat_lng&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LatLng&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;37.78&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;122.40&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;The latitude is &lt;/span&gt;&lt;span class="si"&gt;%f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;lat_lng&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;latitude&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;The longitude is &lt;/span&gt;&lt;span class="si"&gt;%f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;lat_lng&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;longitude&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;By itself, this example is a little forced, but you can already see some benefits:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;increased readability of the print statements instead of cryptic indexing&lt;/li&gt;
&lt;li&gt;the presence of a LatLng class that gives a clear specification (instead of the next person who comes along representing it as a dictionary with two keys, or two floats, and so on...)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So you may well be asking yourself...why not just make a LatLng class?&lt;/p&gt;
&lt;p&gt;An obvious question indeed. If we just stopped at the first example, you could
make a strong argument that a normal Python LatLng class with two attributes
would do everything we wanted without all this fuss. This brings us to the most
important difference between namedtuples and normal Python classes --
attributes in namedtuple subclasses are immutable once created, much like the
tuples for which the class is named. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;&amp;gt;&amp;gt;&amp;gt; LatLng = namedtuple(&amp;#39;LatLng&amp;#39;, [&amp;#39;latitude&amp;#39;, &amp;#39;longitude&amp;#39;])&lt;/span&gt;
&lt;span class="err"&gt;&amp;gt;&amp;gt;&amp;gt; lat_lng = LatLng(37.78, -122.40) &lt;/span&gt;
&lt;span class="err"&gt;&amp;gt;&amp;gt;&amp;gt; lat_lng.latitude = 9.23&lt;/span&gt;
&lt;span class="err"&gt;Traceback (most recent call last):&lt;/span&gt;
&lt;span class="err"&gt;  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;AttributeError: can&amp;#39;t set attribute&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Why do I care about mutability?&lt;/h3&gt;
&lt;p&gt;If you're anything like me, you're probably quite used to the idea of writing
highly stateful programs. Maybe you aren't even sure why some immutable class
is the subject of this entire blog entry...all the good stuff gets done by the
smart mutation of objects anyway, right? Well let me try to convince you of the
merits of immutability with a couple examples, hard-won lessons I've taught
myself several times over.&lt;/p&gt;
&lt;p&gt;Anyone who has spent more than a couple weeks programming Python has probably
been bitten by accidentally modifying a data structure they thought was fixed:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;totally_innocent_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;movie_list&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;movie_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;You Got Served&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;the_best_movies_of_all_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;The Godfather&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Citizen Kane&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2001: A Space Odyssey&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;totally_innocent_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;the_best_movies_of_all_time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Just because you think your data structure is properly structured and validated
doesn't prevent a well intentioned person from later modifying it, possibly
even in a way where you don't ever realize it happened. If you are lucky, this
gets noticed and fixed immediately. If you're unlucky, the bug silently
festers, doing who-knows-what to your application. In my experience, the
original author and the well intentioned person who breaks the code later on
are typically both myself. Coding is complicated and allowing your data to be
mutable when you don't want it to be can lead to trouble.&lt;/p&gt;
&lt;h3&gt;And what if I need more than simple attributes?&lt;/h3&gt;
&lt;p&gt;In most of my personal uses of namedtuples, I inevitably have some additional functionality I wanted from the class -- often some computed result of the various attributes built into the class. Sounds an awful lot like a property right? Give something like the following a shot. You get all the benefits of knowing your core data isn't going to be accidentally modified while also getting fancy properties on the side!&lt;/p&gt;
&lt;p&gt;{% include_code namedtuple_properties.py %}&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Everything in moderation&lt;/h3&gt;
&lt;p&gt;So I hope I've at least suggested to you the benefits of trying out
namedtuples, for both code readability and safety. It's certainly possible to
take this too far, but at the very least it's an excellent way to learn a new
approach and get to investigate some of Python's more niche features.&lt;/p&gt;</content><category term="python"></category></entry></feed>