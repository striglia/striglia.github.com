<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Locally Optimal</title><link href="http://www.locallyoptimal.com/" rel="alternate"></link><link href="http://www.locallyoptimal.com/feeds/all.atom.xml" rel="self"></link><id>http://www.locallyoptimal.com/</id><updated>2019-03-24T00:00:00-07:00</updated><subtitle>hill climbing in SF</subtitle><entry><title>Publish independently and publish often</title><link href="http://www.locallyoptimal.com/blog/2019/03/24/publish-independently-publish-often/" rel="alternate"></link><published>2019-03-24T00:00:00-07:00</published><updated>2019-03-24T00:00:00-07:00</updated><author><name>Scott Triglia</name></author><id>tag:www.locallyoptimal.com,2019-03-24:/blog/2019/03/24/publish-independently-publish-often/</id><summary type="html">&lt;p&gt;I got sideswiped this a confluence of factors that finally convinced me to resurrect a decent static site generator (hi Pelican!) and bring this blog back from the relative dead. &lt;/p&gt;
&lt;p&gt;In fast succession: Medium finally locked &lt;a href="https://help.medium.com/hc/en-us/articles/360018834314-Stories-that-are-part-of-the-metered-paywall"&gt;all useful distribution they do behind an even stronger paywall&lt;/a&gt;, I &lt;a href="https://avc.com/2018/01/owning-yourself/"&gt;read this article&lt;/a&gt; by Fred Wilson on the value of being self-sufficient, and the &lt;a href="https://twitter.com/patio11"&gt;one and only patio11&lt;/a&gt;  kindly responded to &lt;a href="https://twitter.com/scott_triglia/status/1106274981355220992"&gt;some of my questions about how to bootstrap a fledgling website&lt;/a&gt; no one visits out of the cold start problem.&lt;/p&gt;
&lt;p&gt;So I'm going to primarily be writing on my own blog (e.g. this post at http://www.locallyoptimal.com/blog/2019/03/24/publish-independently-publish-often/), syndicating posts across to Medium for a least a bit, and seeing how it goes.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;I got sideswiped this a confluence of factors that finally convinced me to resurrect a decent static site generator (hi Pelican!) and bring this blog back from the relative dead. &lt;/p&gt;
&lt;p&gt;In fast succession: Medium finally locked &lt;a href="https://help.medium.com/hc/en-us/articles/360018834314-Stories-that-are-part-of-the-metered-paywall"&gt;all useful distribution they do behind an even stronger paywall&lt;/a&gt;, I &lt;a href="https://avc.com/2018/01/owning-yourself/"&gt;read this article&lt;/a&gt; by Fred Wilson on the value of being self-sufficient, and the &lt;a href="https://twitter.com/patio11"&gt;one and only patio11&lt;/a&gt;  kindly responded to &lt;a href="https://twitter.com/scott_triglia/status/1106274981355220992"&gt;some of my questions about how to bootstrap a fledgling website&lt;/a&gt; no one visits out of the cold start problem.&lt;/p&gt;
&lt;p&gt;So I'm going to primarily be writing on my own blog (e.g. this post at http://www.locallyoptimal.com/blog/2019/03/24/publish-independently-publish-often/), syndicating posts across to Medium for a least a bit, and seeing how it goes.&lt;/p&gt;


&lt;h2&gt;A new site generator&lt;/h2&gt;
&lt;p&gt;I got fed up with fighting a packaging ecosystem I didn't know well in a language I didn't understand, so I picked this up and took it from Octopress to Pelican. So far there seems to be actively less magic (mostly because I can probably read Makefiles and Python much more natively) and it was easy enough to port.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://jakevdp.github.io/blog/2013/05/07/migrating-from-octopress-to-pelican/"&gt;Credit to an old friend's blog post&lt;/a&gt; showing up unexpectedly in Google results while I tried to work through the port ðŸ˜„&lt;/p&gt;
&lt;h2&gt;Publish independently&lt;/h2&gt;
&lt;p&gt;On both Patrick's and Fred's advice, I'm going to try and have this website be the first publishing platform and, where it seems useful, I can syndicate out elsewhere. Seems that &lt;a href="https://help.medium.com/hc/en-us/articles/217991468-SEO-and-duplicate-content"&gt;importing content into Medium w/ canonical links isn't too hard&lt;/a&gt;, so I got that going for me. In some ways it seems a shame to lose the &lt;a href="https://medium.com/@scott_triglia"&gt;very small amount of momentum I had on Medium&lt;/a&gt;, but I suppose that makes it cheaper to do now than later.&lt;/p&gt;
&lt;p&gt;I'm still quite nervous that this will be the blogging equivalent of someone divesting themselves of USD and solely transacting with cryptocurrency -- I will definitely be more free of "the man" telling me what to do or who can read my writing, but I may find that I don't like the other dowsides that come with that freedom. Then again, the only way to really know how it goes is to give it a shot in practice.&lt;/p&gt;
&lt;h2&gt;Publish often&lt;/h2&gt;
&lt;p&gt;If history is any indication, this will be the hard part. I've had a pretty good run publishing nearly-weekly posts internal to Yelp in the last 3 months or so, but I've been quite awful at putting them out on the greater internet. That seems like a shame in retrospect, because I've often been frustrated at the extreme rarity of any decent writing on technical leadership for non-managers.  Except this week of course - see &lt;a href="https://blog.jessfraz.com/post/defining-a-distinguished-engineer/"&gt;Jessie Frazelle's excellent post on distinguished engineers&lt;/a&gt; which has immediately become my new favorite post describing the holistic set of skills behind excellent senior engineers.&lt;/p&gt;
&lt;p&gt;And to better defend my ability to publish often, there's probably going to be a bias here to just text and links for a while. Something I can crank out in a markdown editor without worrying about any technical issues and throw onto the website without effort.&lt;/p&gt;
&lt;h3&gt;So here's to nothing?&lt;/h3&gt;
&lt;p&gt;Wish me luck -- we'll see if a better generator, some reaffirmed intent, and a coat of new paint do the trick.&lt;/p&gt;</content></entry><entry><title>"Notes from VanPyDay 2016"</title><link href="http://www.locallyoptimal.com/blog/2016/06/04/notes-from-vanpyday-2016/" rel="alternate"></link><published>2016-06-04T15:14:00-07:00</published><updated>2016-06-04T15:14:00-07:00</updated><author><name>Scott Triglia</name></author><id>tag:www.locallyoptimal.com,2016-06-04:/blog/2016/06/04/notes-from-vanpyday-2016/</id><summary type="html">&lt;p&gt;A one-day conference born from the Vanocuver equivalent of our local SF Python meetup. I had meet one of the organizers (Seb, @elbaschid) during a previous PyconAU and he convinced me to drop by and give a talk.&lt;/p&gt;
&lt;p&gt;Really great community (small and friendly!) in a beautiful city. I've never had such a friendly conference audience, it was great to have conversations with many people over the course of the day ðŸ˜Š&lt;/p&gt;
&lt;p&gt;I've tried to write up some useful notes on each of the longer talks, but I very much enjoyed taking part and getting to hear from the diverse backgrounds of all the different speakers and attendees.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;A one-day conference born from the Vanocuver equivalent of our local SF Python meetup. I had meet one of the organizers (Seb, @elbaschid) during a previous PyconAU and he convinced me to drop by and give a talk.&lt;/p&gt;
&lt;p&gt;Really great community (small and friendly!) in a beautiful city. I've never had such a friendly conference audience, it was great to have conversations with many people over the course of the day ðŸ˜Š&lt;/p&gt;
&lt;p&gt;I've tried to write up some useful notes on each of the longer talks, but I very much enjoyed taking part and getting to hear from the diverse backgrounds of all the different speakers and attendees.&lt;/p&gt;


&lt;p&gt;There are not yet single videos for each talk, but you can &lt;a href="https://www.youtube.com/watch?v=x6b7U9GpfQk"&gt;see the entirety of the day at this link&lt;/a&gt; for now. If the individual videos become available, I'll be sure to stick them in the relevant sections below.&lt;/p&gt;
&lt;h2&gt;Click - &lt;a href="https://twitter.com/elbaschid"&gt;Sebastian Vetter&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;(Video link)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A talk introducing the click library, giving examples of how to use it successfully, and explaining the basic reason it exists.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://click.pocoo.org/5/"&gt;click: a library for creating beautiful CLIs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Click's goal is to take a lot of the repetitive/error-prone parts of creating command line interfaces and improve it. Think topics like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Generating help text&lt;/li&gt;
&lt;li&gt;Input validation&lt;/li&gt;
&lt;li&gt;Parsing of command line strings into arguments&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Comparison of existing options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Optparse is mostly a 2.x option, but deprecated since 3.2&lt;/li&gt;
&lt;li&gt;Argparse is the replacement, not too shabby.&lt;/li&gt;
&lt;li&gt;Docopt has some cool features, but imposes some major constraints to get there&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Really good docs on "why bother using this library" &lt;a href="http://click.pocoo.org/5/why"&gt;http://click.pocoo.org/5/why&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Seb &lt;a href="https://bit.ly/click-cookiecutter"&gt;offered a cookiecutter template&lt;/a&gt; for a very basic example of using Click. Nice idea!&lt;/p&gt;
&lt;p&gt;Pro-tip: don't do the &lt;code&gt;uwsgi&lt;/code&gt; thing and have your help text take up 500 lines in a terminal. Use subcommands!&lt;/p&gt;
&lt;p&gt;Shiny features in Click:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Default values can get pulled from environment variables with the &lt;code&gt;envvar&lt;/code&gt; kwarg&lt;/li&gt;
&lt;li&gt;Subcommands can all have distinct sets of arguments&lt;/li&gt;
&lt;li&gt;Allows passing data across subcommands using &lt;code&gt;@click.pass_context&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Default help text comes from docstrings on the methods you're annotating as commands&lt;/li&gt;
&lt;li&gt;Main command helptext is autogenerated, including all subcommands&lt;/li&gt;
&lt;li&gt;Bash autocomplete&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Resources:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Base docs &lt;a href="http://click.pocoo.org/5/"&gt;http://click.pocoo.org/5/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Advanced usage &lt;a href="http://click.pocoo.org/6/advanced/"&gt;http://click.pocoo.org/6/advanced/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Exception handling &lt;a href="http://click.pocoo.org/6/exceptions/"&gt;http://click.pocoo.org/6/exceptions/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Source code on Github &lt;a href="https://github.com/pallets/click"&gt;https://github.com/pallets/click&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Making the most out of code reviews - &lt;a href="https://twitter.com/mariatta"&gt;Mariatta Wijaya&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;(Video link)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Some discussion of bad code reviews with lots of ideas for improving them and making it a healthy, valuable interaction.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Code reviews are great in theory, but can be pretty painful and toxic in practice! Code review should be valuable, not a negative, argumentative system.&lt;/p&gt;
&lt;p&gt;Things code review is not:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A place to enforce your own preferences on other people&lt;/li&gt;
&lt;li&gt;A platform for grandstanding&lt;/li&gt;
&lt;li&gt;Somewhere to belittle devs who know less than you&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But it can be...&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A conversation about how to write great code&lt;/li&gt;
&lt;li&gt;A place to learn new techniques&lt;/li&gt;
&lt;li&gt;A way to catch mistakes before they hit production&lt;/li&gt;
&lt;li&gt;Opportunity to build consensus about &lt;/li&gt;
&lt;li&gt;Ensure your code doesn't have a bus factor of 1 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Mariatta encouraged a lot of work reviewers should do &lt;em&gt;before&lt;/em&gt; sitting down to write feedback on a new code review.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Empathize wiht whoever you're reviewing (e.g. are they new to Python? new to this codebase?)&lt;/li&gt;
&lt;li&gt;Understand the context of the change&lt;/li&gt;
&lt;li&gt;Give it the proper time it deserves. Good code review is not a fast process.&lt;/li&gt;
&lt;li&gt;Don't be afraid to point out where you see &lt;em&gt;good&lt;/em&gt; code! Code review can be complimentary too &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Remember that this is all important, and you should be explicitly explaining how to go about the process. Don't fall into the &lt;a href="https://kateheddleston.com/blog/the-null-process"&gt;Null Process Trap&lt;/a&gt;! Just like python prefers explicit over implicit, we should too ðŸ˜Š&lt;/p&gt;
&lt;h2&gt;Protecting your users with circuit breakers - &lt;a href="https://twitter.com/scott_triglia"&gt;Scott Triglia&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;(Video link)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Learn what the Circuit Breaker pattern is, and how you can customize the default setup for your own use cases.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I was a bit busy giving this one, so I have very few comments about it :)&lt;/p&gt;
&lt;p&gt;But some interesting extra reading:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="techblog.netflix.com/2011/12/making-netflix-api-more-resilient.html"&gt;Netflix talking about resilient APIs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://engineering.heroku.com/blogs/2015-06-30-improved-production-stability-with-circuit-breakers/"&gt;Circuit breakers at Heroku&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Live Coding in Python - Don Kirkby&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Playing with the author's LightTable-esque plugin for watching python code execute live.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Walkthrough of various small code snippets (Turtle, binary search) with support for introspecting the state of the systme along the way and having live-reruns while code changed.&lt;/p&gt;
&lt;p&gt;Very hard to describe in text, but there are some fun demo videos at &lt;a href="http://donkirkby.github.io/live-py-plugin/"&gt;http://donkirkby.github.io/live-py-plugin/&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;The high and low of a Python Data stack - &lt;a href="http://www.vanpyday.com/en/latest/2016/lau.html#lau"&gt;Boris Lau&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;(Video link)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;An exploration of the PyData ecosystem, with lots of discussion of individual tools.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;High level overview of the various component parts of the PyData ecosystem.&lt;/p&gt;
&lt;h4&gt;Jupyter/IPython Notebooks&lt;/h4&gt;
&lt;p&gt;Interactive python code, executes real code. Reproducible!&lt;/p&gt;
&lt;h4&gt;Plotting - Bokeh&lt;/h4&gt;
&lt;p&gt;Visualization inside of Jupyter notebooks! Has some visual similarities with &lt;a href="http://plot.ly"&gt;plot.ly&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Modeling - Scikit-lrn&lt;/h4&gt;
&lt;p&gt;Has a ton of the tough ML models you love impelmented for you in a reliable/composable way. &lt;/p&gt;
&lt;h4&gt;Data access - Pandas/Numpy&lt;/h4&gt;
&lt;p&gt;Very efficient with multi-dimensional data. Uses a ton of &lt;a href="http://www.netlib.org/blas/"&gt;BLAS&lt;/a&gt; under the hood. Represents your data on disk in a way that interops efficiently and &lt;/p&gt;
&lt;h4&gt;Low level optimization - Numba&lt;/h4&gt;
&lt;p&gt;Compiles python into LLVM...apparently comparable to Fortran's performance.&lt;/p&gt;
&lt;p&gt;Even got a little shout out to &lt;a href="https://twitter.com/jakevdp"&gt;@jakevdp&lt;/a&gt; for &lt;a href="https://jakevdp.github.io/blog/2015/02/24/optimizing-python-with-numpy-and-numba/"&gt;this article on using Numba&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Apache data stack&lt;/h4&gt;
&lt;p&gt;Very focused on scaling up across a distributed cluster. Kind of the opposite of most python libraries which focus on single-process work.&lt;/p&gt;
&lt;h2&gt;Python in the NHL Front Office - &lt;a href="https://twitter.com/joshweissbock"&gt;Josh Weissbock&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;(Video link)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;An extended case study of how you can use Python tools to analyze and predict hockey performance from past statistics.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Overview of how you can use quantitative evidence to answer questions about Hockey! &lt;/p&gt;
&lt;p&gt;Tools mentioned:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;BeautifulSoup for scraping out hockey data from webpages&lt;/li&gt;
&lt;li&gt;Selenium+PhantomJS for scraping websites like a real user from the command line&lt;/li&gt;
&lt;li&gt;Various pydata tools for analysis&lt;/li&gt;
&lt;li&gt;sqlite3 for a simple sql-like database on disk&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Deciding between Continuity and Change in Open Source - &lt;a href="https://twitter.com/chrisjrn"&gt;Christopher Neugebauer&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;(Video link)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A discussion of how to successfully encourage and execute on large changes within open source communities.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A story about trying to develop an open source software project to help manage conference organization.&lt;/p&gt;
&lt;p&gt;How do we migrate an open source community through a complicated transition?&lt;/p&gt;
&lt;h4&gt;Cost-benefit analysis&lt;/h4&gt;
&lt;p&gt;In business:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What benefit does this change bring?&lt;/li&gt;
&lt;li&gt;Is it going to make us more money than it costs?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In OSS:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How many people will this change bring joy to?&lt;/li&gt;
&lt;li&gt;How long will it take?&lt;/li&gt;
&lt;li&gt;How many people will this change burn out in the process?&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Continuity&lt;/h4&gt;
&lt;p&gt;Sometimes it's right to decide not to change things! This is the result of doing this cost-benefit tradeoff and deciding you should stay put.&lt;/p&gt;
&lt;h4&gt;Change disguised as continuity&lt;/h4&gt;
&lt;p&gt;Sometimes you can make a huge change that appears mostly invisible. This isn't a bad thing! In fact it might be the best of both worlds.&lt;/p&gt;
&lt;h4&gt;Wholesale replacement&lt;/h4&gt;
&lt;p&gt;A pretty damaging form of change. This costs a lot, requires work from any of your users that want to change, and might not end up being worth all the effort.&lt;/p&gt;
&lt;p&gt;This is the hardest part! Observations about successful wholesale change:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Avoid &lt;a href="https://en.wiktionary.org/wiki/bikeshedding"&gt;bikeshedding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Try to avoid losing major parts of your community via a fork. But keep in mind that attempting to force only one group may also be damaging.&lt;/li&gt;
&lt;li&gt;Most of the time, you can't effect wholesale change by fiat. Find consensus!&lt;/li&gt;
&lt;li&gt;Involve people when there is something they can actively do!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Open Source and You - &lt;a href="https://twitter.com/joshsimmons"&gt;Josh Simmons&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Tips for successfully building and growing your open source project or community.&lt;/strong&gt;&lt;/p&gt;
&lt;h5&gt;Make excellent docs&lt;/h5&gt;
&lt;p&gt;Nobody can start working on your project if they don't understand what it is or what purpose it serves!&lt;/p&gt;
&lt;h5&gt;Share your story and knowledge&lt;/h5&gt;
&lt;p&gt;Never forget that the things you struggled to learn might not be common knowledge. Go give a conference talk!&lt;/p&gt;
&lt;p&gt;Expose your own uncertainty to show it's legitimate and normal to not know everything!&lt;/p&gt;
&lt;p&gt;There's great opportunities out there across communities. Try joining a new one (or helping someone who's new to yours).&lt;/p&gt;
&lt;h5&gt;Mentor new contributors&lt;/h5&gt;
&lt;p&gt;Everyone can use (and will greatly appreciate) a leg up when they're new on the scene. &lt;/p&gt;
&lt;p&gt;Encourage a safe space where the new contributors can get up to speed with someone who knows the ropes.&lt;/p&gt;
&lt;p&gt;Use this as an experience to be exposed to someone who's unlike yourself! As a bonus, you're making the community more welcoming when you do this.&lt;/p&gt;
&lt;h5&gt;Inclusion solves your problems for more people&lt;/h5&gt;
&lt;p&gt;Consider aspects like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;accessibility&lt;/li&gt;
&lt;li&gt;internationalization&lt;/li&gt;
&lt;li&gt;availablility to non-technical contributors&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Don't tolerate jerks&lt;/h5&gt;
&lt;p&gt;Our community is only as awesome as the worst behavior we tolerate.&lt;/p&gt;
&lt;p&gt;Its up to us all to maintain a healthy community and actively work to make it better.&lt;/p&gt;
&lt;h2&gt;Ship It: Python Packaging and Distribution - Nathaniel Knight&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Intro to the basics of python packaging and the ecosystem of tools surrounding it.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Introduction to python packaging! Discussion of package installation, distribution, and related concerns.&lt;/p&gt;
&lt;p&gt;Some additional resources:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://packaging.python.org/en/latest/"&gt;Python's official packaging guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.pypa.io/en/latest/history/"&gt;PyPA's history of python packaging tooling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pip.pypa.io/en/stable/user_guide/"&gt;Pip's user guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Lightning talks&lt;/h2&gt;
&lt;p&gt;Up first was a Continuum.io employee. Lots of the normal cool tools, including a new one called Navigator that lets you visually explore your conda environments you've created. Solves a major pain point I've felt from using Conda in the past.&lt;/p&gt;
&lt;p&gt;The next talk was about python education (and learning to code in general). Went through a simple "learning to code" exercise about writing instructions to drink a jug of water.&lt;/p&gt;
&lt;p&gt;Jas Sohi combined Google's BigQuery with python's BeautifulSoup library to interact with web-uis and automatically check they had certain properties. &lt;/p&gt;
&lt;p&gt;Talk #4 was a spur of the moment demo of trying to write a SublimeText plugin in the middle of the conference ðŸ˜¸ The speaker attempted to import Don Kirkby's library (from a previous talk!)  and actually got the basic proof-of-concept working! Not half bad on short notice.&lt;/p&gt;
&lt;p&gt;Talk #5 was an intro to SQLAlchemy...in particular the Core part of the library. Some talk of the dangers of ORMs and some context on when you might prefer Core over the ORM. &lt;/p&gt;
&lt;p&gt;Talk #6 was the story of one particular person's experience learning Python &lt;a href="https://teamtreehouse.com/"&gt;from Team Treehouse&lt;/a&gt;. Sounded like some good teaching &lt;a href="http://www.pyvideo.org/speaker/738/kenneth-love"&gt;from Kenneth Love&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;The final talk was on ontologies -- dictionaries relating concepts together so we can translate concepts between two distinct systems. Some interesting relationships to work the CDC does with the semantic web. Brings me back to my SPARQL days ðŸ˜²&lt;/p&gt;
&lt;h2&gt;Overall&lt;/h2&gt;
&lt;p&gt;A really great conference! Super friendly and a tremendously excited group of developers. I'd heartily encourage showing up for any future Vancouver meetups...it was a great trip and a very enjoyable conference.&lt;/p&gt;</content></entry><entry><title>"PyconAU 2015 field notes"</title><link href="http://www.locallyoptimal.com/blog/2015/08/25/pyconau-field-notes/" rel="alternate"></link><published>2015-08-25T19:16:00-07:00</published><updated>2015-08-25T19:16:00-07:00</updated><author><name>Scott Triglia</name></author><id>tag:www.locallyoptimal.com,2015-08-25:/blog/2015/08/25/pyconau-field-notes/</id><summary type="html">&lt;p&gt;I was lucky enough to speak at PyconAU 2015, in Brisbane! Least I can do is write up some notes about the talks I particularly enjoyed. Here they lie, somewhat edited and mostly linked against the conference website.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;I was lucky enough to speak at PyconAU 2015, in Brisbane! Least I can do is write up some notes about the talks I particularly enjoyed. Here they lie, somewhat edited and mostly linked against the conference website.&lt;/p&gt;


&lt;p&gt;It's worth mentioning that PyConAU was really well run and organized, both as a speaker and an attendee. Well worth the trip if you're ever in the area!&lt;/p&gt;
&lt;h2&gt;&lt;a href="https://www.youtube.com/watch?v=H0KReHUawHI"&gt;My talk -- the awkward adolescence of SOA&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Let's get mine out of the way first. I spoke on what it's like to watch service architecture mature at Yelp...in particular the kind of application challenges you only see in a more mature SOA ecosystem.&lt;/p&gt;
&lt;p&gt;I'll leave you to watch the talk, but I think it went pretty well within the time limits. Had some good discussions in the hallway after about the (many) other interesting challenges a system like this faces besides the ones I had time to present. It's an incredibly complex topic, but I was happy to hear from a few separate people who echoed a lot of the difficulties I've experienced in this area.&lt;/p&gt;
&lt;p&gt;I should also &lt;a href="https://www.youtube.com/watch?v=z3_HorshzJ4"&gt;link the slightly longer version of this talk&lt;/a&gt;, which I gave at Europython. It's largely the same content, but with an extra section on keeping systems decoupled.&lt;/p&gt;
&lt;h2&gt;&lt;a href="http://2015.pycon-au.org/schedule/30126/view_talk?day=saturday"&gt;Slow down, compose yourself&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;"Inheritance leads to objects that are simply too big"&lt;/p&gt;
&lt;p&gt;Turned into a very testing/mocking/verified fakes heavy talk very quickly. Worth watching in concert w/ the verified fake talk at EuroPython. &lt;/p&gt;
&lt;p&gt;Largest lesson from talk might be that good composition forces exposing seams in your arch that inheritance may hide.&lt;/p&gt;
&lt;h2&gt;&lt;a href="http://2015.pycon-au.org/schedule/30114/view_talk?day=saturday"&gt;Fang: Pythonic dependency injection&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/ncraike/fang"&gt;Github repo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Definition: code you write doesn't directly refer (or require to be passed) the objects it uses. Most of the discovery and retrieval of such objects is completely magic and done without programmer intervention.&lt;/p&gt;
&lt;p&gt;Most popular in Java/C# because of their typing systems being restrictive. &lt;/p&gt;
&lt;p&gt;I found the most interesting part of the talk discussion about why I should even care about DI in python. What about just passing objects around and/or mocking libraries?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Best use case is testing. Some things you want to mock are never available at the module scope.&lt;/li&gt;
&lt;li&gt;Missing mocks are a definite issue for testing (think scary side-effects like sending email in your testing suite)&lt;/li&gt;
&lt;li&gt;Many people work around this by passing in deps that aren't deps -- see kwargs w/ default args that are never actually used.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href="http://2015.pycon-au.org/schedule/30046/view_talk?day=saturday"&gt;To AST and Beyond&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Cool talk, chiefly about tooling surrounding the Python AST. Most important things I learned about were these projects:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/2/library/ast.html"&gt;Python AST module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://greentreesnakes.readthedocs.org/en/latest/"&gt;Green Tree Snakes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/berkerpeksag/astor"&gt;Astor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href="http://2015.pycon-au.org/schedule/30062/view_talk?day=saturday"&gt;Breaking Backwards Compatibility&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;My team at Yelp maintains a public-facing API, so this one was particularly interesting. Lots of good discussion of the various aspects of maintaining a public, changing interface.&lt;/p&gt;
&lt;p&gt;Versioning:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Differentiates versions of the software. Allows users to be aware of what they're interacting with.&lt;/li&gt;
&lt;li&gt;Allows you to publish timelines and release schedules. Give expectations about when changes are going to happen.&lt;/li&gt;
&lt;li&gt;Allows planned deprecation of old features/behaviors. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Communication:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Be clear when features are being deprecated or removed.&lt;/li&gt;
&lt;li&gt;Make deprecation notices at least one cycle in advance (e.g. a deprecation warning release and then a later removal major-version bump)&lt;/li&gt;
&lt;li&gt;Have a well defined (stable process!) release cycle&lt;/li&gt;
&lt;li&gt;Communicate clearly with your users. Changelogs, even guides for major changes...make sure they know all of this.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Consistency:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Consistency in your API does wonders for its adoption and ease-of-use&lt;/li&gt;
&lt;li&gt;Helps make large breaking changes go easier (reduces cognitive overhead)&lt;/li&gt;
&lt;li&gt;Consider even providing contracts in your API (like SLAs? connection w/ acceptance tests)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Privacy:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Private by default&lt;/li&gt;
&lt;li&gt;Be cautious of what you expose to the outside world. Once you do, it goes from implementation detail to part of your public interface. &lt;/li&gt;
&lt;li&gt;Once it is public, you have to assume it's being used in the most awful/strange ways possible&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Testing:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Acceptance testing is extremely important&lt;/li&gt;
&lt;li&gt;Test cross-version where possible&lt;/li&gt;
&lt;li&gt;Cross-version monitoring/canarying?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Keynote: Consequences of an Insightful Algorithm&lt;/h2&gt;
&lt;p&gt;Very high level talk about the negative impact of the algorithms on our users. How can we write algorithms and perceive insights without losing our empathy? Without hurting our users?&lt;/p&gt;
&lt;p&gt;False positives and negatives have human consequences when deployed on people. Just having a low rate of FP isn't enough if FP have particularly harmful effects.&lt;/p&gt;
&lt;p&gt;Academic studies have tons of oversight and checks/balances. Industry needs to make sure it's not doing wildly unethical things in the name of progress.&lt;/p&gt;
&lt;p&gt;Increase awareness of edge cases, failure modes, and worst case scenarios. Be humble and admit that we cannot know everything about the users we are interacting with. &lt;/p&gt;
&lt;p&gt;Huge asks. Huge awareness of consequences.&lt;/p&gt;
&lt;h2&gt;&lt;a href="http://2015.pycon-au.org/schedule/30012/view_talk?day=sunday"&gt;Make your logs work for you&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Pretty high level overview of the ELK stack. Went into some detail on each part of it. &lt;/p&gt;
&lt;p&gt;Recommends that, as your data gets older, you should snapshot it, move to weaker boxes, and eventually delete entirely. Advocates for daily indices to make this easier.&lt;/p&gt;
&lt;p&gt;Referenced &lt;a href="https://vimeo.com/elasticsearch/review/107682325/6c999f47b4"&gt;entity centric indexing&lt;/a&gt; talk as relevant.&lt;/p&gt;</content></entry><entry><title>"Executable python scripts via entry points"</title><link href="http://www.locallyoptimal.com/blog/2014/03/14/executable-python-scripts-via-entry-points/" rel="alternate"></link><published>2014-03-14T16:11:00-07:00</published><updated>2014-03-14T16:11:00-07:00</updated><author><name>Scott Triglia</name></author><id>tag:www.locallyoptimal.com,2014-03-14:/blog/2014/03/14/executable-python-scripts-via-entry-points/</id><summary type="html">&lt;p&gt;A quick topic -- executing a python module from the command line!&lt;/p&gt;
</summary><content type="html">&lt;p&gt;A quick topic -- executing a python module from the command line!&lt;/p&gt;


&lt;p&gt;When &lt;a href="http://locallyoptimal.com/blog/2014/03/14/building-a-basic-package-pt-1-bare-bones/"&gt;I last left&lt;/a&gt; my pet rss2sms project, it had been transformed into a basic python package. Unfortunately, this means that my old method of running &lt;code&gt;python rss2sms.py --foobar&lt;/code&gt; from the command line is not so simple anymore. In fact what I really want is to be able to just run &lt;code&gt;rss2sms --foobar&lt;/code&gt; from the command line after I install the package.&lt;/p&gt;
&lt;p&gt;Luckily python has exactly what we need in the form of setuptools's &lt;a href="http://pythonhosted.org//setuptools/setuptools.html#automatic-script-creation"&gt;console_script argument to entry_points&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let's go ahead and add it to our setup.py:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;rss2sms&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                                                             
    &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;find_version&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rss2sms&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__init__.py&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;                             

&lt;span class="c1"&gt;# ...the rest of our setup.py here....&lt;/span&gt;

    &lt;span class="n"&gt;entry_points&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;                                                              
        &lt;span class="s1"&gt;&amp;#39;console_scripts&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;                                                    
            &lt;span class="s1"&gt;&amp;#39;rss2sms=rss2sms:main&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                                             
        &lt;span class="p"&gt;],&lt;/span&gt;                                                                      
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So simple! Note that we're linking the executable &lt;code&gt;rss2sms&lt;/code&gt; here to running the python function &lt;code&gt;main&lt;/code&gt; in the &lt;code&gt;rss2sms&lt;/code&gt; module. If we look at that function, it just does the normal command line parsing and function calling that it always has.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;                                                                     
    &lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OptionParser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;                                                     
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-u&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;--url&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;rss_url&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                            
                            &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;url of rss feed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                             
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-t&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;--to&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;to_num&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                              
                            &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cell number to send sms alerts to&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;           
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-f&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;--from&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;from_num&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                          
                            &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cell number to send sms alerts to (overrides environment variable TWILIO_NUMBER)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-i&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;--id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;rss_id_field&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                        
                            &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;unique id rss field used for display in SMS and for equality comparison (defaults to &amp;#39;link&amp;#39;)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;--display&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;rss_display_field&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;              
                            &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name of rss field used for display in SMS (defaults to &amp;#39;title&amp;#39;)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-c&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;--cache-filename&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cache_filename&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;          
                            &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;optional file to cache last post in&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;         

    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;                                       
    &lt;span class="n"&gt;rss2sms&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Rss2Sms&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="nb"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;                                          
    &lt;span class="n"&gt;rss2sms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_and_alert&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now let's start up a fresh virtualenv and test it out. We can use pip's develop option to install a package by just passing it a path.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~/Desktop/github/rss2sms (master) $ virtualenv entry_point_test; source entry_point_test/bin/activate
New python executable in entry_point_test/bin/python
Installing Setuptools...........done.
Installing Pip..................done.
(entry_point_test) ~/Desktop/github/rss2sms (master) $ pip install -e .

... lots of text from installation...

(entry_point_test) ~/Desktop/github/rss2sms (master) $ rss2sms --help
Usage: rss2sms [options]

Options:
  -h, --help            show this help message and exit
  -u RSS_URL, --url=RSS_URL
                        url of rss feed
  -t TO_NUM, --to=TO_NUM
                        cell number to send sms alerts to
  -f FROM_NUM, --from=FROM_NUM
                        cell number to send sms alerts to (overrides
                        environment variable TWILIO_NUMBER)
  -i RSS_ID_FIELD, --id=RSS_ID_FIELD
                        unique id rss field used for display in SMS and for
                        equality comparison (defaults to &amp;#39;link&amp;#39;)
  -d RSS_DISPLAY_FIELD, --display=RSS_DISPLAY_FIELD
                        name of rss field used for display in SMS (defaults to
                        &amp;#39;title&amp;#39;)
  -c CACHE_FILENAME, --cache-filename=CACHE_FILENAME
                        optional file to cache last post in
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And just like that we have an executable hooked up our python module. We can even use which to see how it works:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;entry_point_test&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;Desktop&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;rss2sms&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;which&lt;/span&gt; &lt;span class="n"&gt;rss2sms&lt;/span&gt;
&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;striglia&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Desktop&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;rss2sms&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;entry_point_test&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;rss2sms&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;entry_point_test&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;Desktop&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;rss2sms&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cat&lt;/span&gt; &lt;span class="sb"&gt;`which rss2sms`&lt;/span&gt;
&lt;span class="c1"&gt;#!/Users/striglia/Desktop/github/rss2sms/entry_point_test/bin/python            &lt;/span&gt;
&lt;span class="c1"&gt;# EASY-INSTALL-ENTRY-SCRIPT: &amp;#39;rss2sms==0.0.1&amp;#39;,&amp;#39;console_scripts&amp;#39;,&amp;#39;rss2sms&amp;#39;          &lt;/span&gt;
&lt;span class="n"&gt;__requires__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rss2sms==0.0.1&amp;#39;&lt;/span&gt;                                                 
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;                                                                      
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pkg_resources&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;load_entry_point&lt;/span&gt;                                      

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;                                                      
    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;                                                                   
        &lt;span class="n"&gt;load_entry_point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rss2sms==0.0.1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;console_scripts&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rss2sms&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)()&lt;/span&gt;         
    &lt;span class="p"&gt;)&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This executable is just a simple python module which, when we call it, uses the pkg_resources library to look up what python module our setup.py says we should call. All in all, a very painless way to distribute nice executables for your library.&lt;/p&gt;</content></entry><entry><title>"Building a basic package pt. 1: Bare Bones"</title><link href="http://www.locallyoptimal.com/blog/2014/03/14/building-a-basic-package-pt-1-bare-bones/" rel="alternate"></link><published>2014-03-14T13:44:00-07:00</published><updated>2014-03-14T13:44:00-07:00</updated><author><name>Scott Triglia</name></author><id>tag:www.locallyoptimal.com,2014-03-14:/blog/2014/03/14/building-a-basic-package-pt-1-bare-bones/</id><summary type="html">&lt;p&gt;Every once in a while I get the itch to turn some one off script I wrote into a proper package. Turns out advice on the subject is a little scattered, and if you're anything like me it can be frustrating to track down relevant posts on the entire subject. So, just for fun, let's walk through the process of taking a one-off script I wrote and making it into a nice python package, complete with isolated testing, uploading to pypi, and convenient installation.&lt;/p&gt;
&lt;p&gt;Now knowing my blogging habits, I'm splitting this into a few small posts in the hopes that I actually get through them. So lets take a current project I have and decide where to start.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Every once in a while I get the itch to turn some one off script I wrote into a proper package. Turns out advice on the subject is a little scattered, and if you're anything like me it can be frustrating to track down relevant posts on the entire subject. So, just for fun, let's walk through the process of taking a one-off script I wrote and making it into a nice python package, complete with isolated testing, uploading to pypi, and convenient installation.&lt;/p&gt;
&lt;p&gt;Now knowing my blogging habits, I'm splitting this into a few small posts in the hopes that I actually get through them. So lets take a current project I have and decide where to start.&lt;/p&gt;


&lt;h2&gt;rss2sms - a humble beginning&lt;/h2&gt;
&lt;p&gt;The project I'd like to fix up is called rss2sms and lives &lt;a href="http://www.github.com/striglia/rss2sms"&gt;on my github account&lt;/a&gt;. I originally started it back when I was house hunting in San Francisco and was getting tired of new apartments going up on Craigslist without me noticing. So I figured it was time to automate this!&lt;/p&gt;
&lt;p&gt;The code is pretty simple. At its core, it does the following steps whenever it is run:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Reads a passed RSS feed into memory (e.g. a Craigslist search)&lt;/li&gt;
&lt;li&gt;Loads the timestamp of the last post we were notified about from file&lt;/li&gt;
&lt;li&gt;Sends a text for each post newer than the timestamp to a specified number&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As a result of being fairly simple, I just threw the whole thing in one python module. In fact, I threw it in one big class! I want to clean up the implementation a little as we go on, but for now let's focus on the task of turning this into a package.&lt;/p&gt;
&lt;h2&gt;Structure&lt;/h2&gt;
&lt;p&gt;One of the easiest steps we can take toward making a package is to imitate the proper directory structure. The kind folks over at the Python Packaging Authority (aka pypa) have &lt;a href="http://python-packaging-user-guide.readthedocs.org/en/latest/index.html"&gt;assembled a user guide&lt;/a&gt; for fellow travelers on the road to packaging nirvana. Unfortunately, it is very much a work in progress and a little thin on details in my opinion.&lt;/p&gt;
&lt;p&gt;As a result, we'll mostly be mimicking the pypa's sample project, &lt;a href="https://github.com/pypa/sampleproject"&gt;found on their github&lt;/a&gt;. Let's compare our current project's structure against that.&lt;/p&gt;
&lt;p&gt;rss2sms:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;- .gitignore
- README.md
- rss2sms.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;pypa's sample project:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;- sample/
- tests/
- .gitignore
- README.md
- DESCRIPTION.rst
- MANIFEST.in
- setup.py
- setup.cfg
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Well...looks like we need some changes. Let's walk through a couple of these and explain what they're doing.&lt;/p&gt;
&lt;p&gt;The most noticeable feature of a python package is the package directory. It will hold all the code necessary to run our package once it's installed. Let's start there and simply move our main module inside a directory named after the project. And just for fun, let's make a stub test directory that we can fill in properly later on.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; ~/Desktop/github/rss2sms (master) $ st
On branch master
Your branch is up-to-date with &amp;#39;origin/master&amp;#39;.

Changes to be committed:
  (use &amp;quot;git reset HEAD &amp;lt;file&amp;gt;...&amp;quot; to unstage)

    renamed:    rss2sms.py -&amp;gt; rss2sms/__init__.py
    new file:   tests/__init__.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Perfect. Now comparing to the sample package, the only remaining requirement is a &lt;code&gt;setup.py&lt;/code&gt; module to tell python the basic details about our package.&lt;/p&gt;
&lt;h2&gt;setup.py&lt;/h2&gt;
&lt;p&gt;As you may be aware, the history of python packaging is not particularly simple or straightforward. There are many &lt;a href="http://blog.startifact.com/posts/older/a-history-of-python-packaging.html"&gt;blog posts&lt;/a&gt;, good &lt;a href="http://pyvideo.org/video/1601/twisted-history-of-python-packaging"&gt;talks at pycon&lt;/a&gt;, and a variety of other sources to learn about the details. Some day I may even take a shot at a summary here. But for now, we're going to bypass all the history and jump straight to building a current &lt;code&gt;setup.py&lt;/code&gt; for our package.&lt;/p&gt;
&lt;p&gt;That said, let's take the &lt;a href="https://github.com/pypa/sampleproject/blob/master/setup.py"&gt;basic setup.py&lt;/a&gt; and mold it to our purposes. I've inlined our basic version below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;setuptools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;find_packages&lt;/span&gt;                                     
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;codecs&lt;/span&gt;                                                                   
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;                                                                       
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;                                                                          


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find_version&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;file_paths&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;                                                  
    &lt;span class="c1"&gt;# Open in Latin-1 so that we avoid encoding errors.                         &lt;/span&gt;
    &lt;span class="c1"&gt;# Use codecs.open for Python 2 compatibility                                &lt;/span&gt;
    &lt;span class="n"&gt;here&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;                           
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;codecs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;here&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;file_paths&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;latin1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;      
        &lt;span class="n"&gt;version_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;                                                 

    &lt;span class="c1"&gt;# The version line must have the form                                          &lt;/span&gt;
    &lt;span class="c1"&gt;# __version__ = &amp;#39;ver&amp;#39;                                                       &lt;/span&gt;
    &lt;span class="n"&gt;version_match&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;^__version__ = [&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s2"&gt;]([^&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s2"&gt;]*)[&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s2"&gt;]&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;            
                              &lt;span class="n"&gt;version_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                               
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;version_match&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;                                                           
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;version_match&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                                           
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;RuntimeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Unable to find version string.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                        


&lt;span class="c1"&gt;# Get the long description from the relevant file                               &lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;codecs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;DESCRIPTION.rst&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;                     
    &lt;span class="n"&gt;long_description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;                                                 

&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;                                                                          
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;rss2sms&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                                                             
    &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;find_version&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rss2sms&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__init__.py&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;                             
    &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;An sms alerter for updates to an rss feed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                    
    &lt;span class="n"&gt;long_description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;long_description&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                                          
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://github.com/striglia/rss2sms&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                                   
    &lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Scott Triglia&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                                                     
    &lt;span class="n"&gt;author_email&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;scott.triglia@gmail.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                                     
    &lt;span class="n"&gt;license&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;MIT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                                    

    &lt;span class="n"&gt;classifiers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;                                                               
        &lt;span class="s1"&gt;&amp;#39;Development Status :: 3 - Alpha&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                                      
        &lt;span class="s1"&gt;&amp;#39;License :: OSI Approved :: MIT License&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                               

        &lt;span class="s1"&gt;&amp;#39;Programming Language :: Python :: 2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                                  
        &lt;span class="s1"&gt;&amp;#39;Programming Language :: Python :: 2.6&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                                
        &lt;span class="s1"&gt;&amp;#39;Programming Language :: Python :: 2.7&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                                
    &lt;span class="p"&gt;],&lt;/span&gt;                                                                          
    &lt;span class="n"&gt;keywords&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rss sms alerts&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                                                  

    &lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;find_packages&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exclude&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;tests*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;                                 
    &lt;span class="n"&gt;install_requires&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;                                                          
        &lt;span class="s1"&gt;&amp;#39;feedparser&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                                                           
        &lt;span class="s1"&gt;&amp;#39;tinyurl&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                                                              
        &lt;span class="s1"&gt;&amp;#39;twilio&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                                                               
    &lt;span class="p"&gt;],&lt;/span&gt;                                                                          
    &lt;span class="n"&gt;entry_points&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;                                                              
        &lt;span class="s1"&gt;&amp;#39;console_scripts&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;                                                    
            &lt;span class="s1"&gt;&amp;#39;rss2sms=rss2sms:main&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                                             
        &lt;span class="p"&gt;],&lt;/span&gt;                                                                      
    &lt;span class="p"&gt;},&lt;/span&gt;                                                                          
&lt;span class="p"&gt;)&lt;/span&gt;                                          
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Before we move on, let's make a brief note of the &lt;code&gt;install_requires&lt;/code&gt; directive.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;install_requires=[                                                          
        &amp;#39;feedparser&amp;#39;,                                                           
        &amp;#39;tinyurl&amp;#39;,                                                              
        &amp;#39;twilio&amp;#39;,                                                               
    ],
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is where our package can specify all the other python packages it depends on to work. In my original script, I just blindly imported things and assumed they were available. In this new way, we can specify what we need and python will automatically install them when we install our package.&lt;/p&gt;
&lt;h2&gt;One last thing&lt;/h2&gt;
&lt;p&gt;And final feature I'd like to add, even though it's not in the sample package, is a Makefile. You might be wondering why we need a Makefile at all here. Truth is, we don't really need one. The project is not that complicated and we don't need to actually build any dependencies to run the code.&lt;/p&gt;
&lt;p&gt;That said, I like Makefiles as a generic interface to standard tasks for the package. In our case, I'd like there to be simple, implementation-agnostic commands to clean the project up and to run our tests.&lt;/p&gt;
&lt;p&gt;This is pretty cheap to do with a Makefile. In fact, we can add this simple Makefile to do what I just described:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~/Desktop/github/rss2sms (master) $ cat Makefile 
clean:
    find ./ -name &amp;quot;*.pyc&amp;quot; -delete
test:
    py.test tests
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nothing complicated here yet, but it gives us the room to expand later on. Note that I am using the excellent &lt;a href="http://pytest.org/latest/"&gt;py.test package&lt;/a&gt; to do my testing. I'm sure I'll talk more about how much I like it later, but you should definitely check it out in the meantime.&lt;/p&gt;
&lt;h2&gt;Wrapping Up&lt;/h2&gt;
&lt;p&gt;With that, we're basically set. We have the core package structure down, and we can try to install our package locally. Let's test it out:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~/Desktop/github/rss2sms (master) $ virtualenv venv
New python executable in venv/bin/python
Installing Setuptools..............................................................................................................................................................................................................................done.
Installing Pip.....................................................................................................................................................................................................................................................................................................................................done.

 ~/Desktop/github/rss2sms (master) $ source venv/bin/activate

 (venv) ~/Desktop/github/rss2sms (master) $ python setup.py develop
 running develop
running egg_info
writing requirements to rss2sms.egg-info/requires.txt
writing rss2sms.egg-info/PKG-INFO
writing top-level names to rss2sms.egg-info/top_level.txt
writing dependency_links to rss2sms.egg-info/dependency_links.txt
writing entry points to rss2sms.egg-info/entry_points.txt
reading manifest file &amp;#39;rss2sms.egg-info/SOURCES.txt&amp;#39;
writing manifest file &amp;#39;rss2sms.egg-info/SOURCES.txt&amp;#39;
running build_ext
Creating /Users/striglia/Desktop/github/rss2sms/venv/lib/python2.7/site-packages/rss2sms.egg-link (link to .)
Adding rss2sms 0.0.1 to easy-install.pth file
Installing rss2sms script to /Users/striglia/Desktop/github/rss2sms/venv/bin

&amp;lt;many more lines of text here&amp;gt;

Installed /Users/striglia/Desktop/github/rss2sms/venv/lib/python2.7/site-packages/httplib2-0.8-py2.7.egg
Finished processing dependencies for rss2sms==0.0.1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Success! We have a package we can install locally, which knows about its dependencies (courtesy of setup.py) and which has very rudimentary testing and documentation. In future iterations of this series, I hope to jump into a lot of interesting topics - particularly better testing setups, simple invocations of our script from the command line, and even uploading to pypi. Until then, you can find all the code described &lt;a href="https://github.com/striglia/rss2sms/tree/v0.0.1"&gt;here on my github&lt;/a&gt;, under the tagged version 0.0.1 of rss2sms.&lt;/p&gt;</content></entry><entry><title>"There is no such thing as magic"</title><link href="http://www.locallyoptimal.com/blog/2014/03/11/there-is-no-such-thing-as-magic/" rel="alternate"></link><published>2014-03-11T22:43:00-07:00</published><updated>2014-03-11T22:43:00-07:00</updated><author><name>Scott Triglia</name></author><id>tag:www.locallyoptimal.com,2014-03-11:/blog/2014/03/11/there-is-no-such-thing-as-magic/</id><summary type="html">&lt;p&gt;Do you know my favorite fact about programming? In the end, everything is build from code and you can understand it all -- there is absolutely no magic. With enough effort, almost everything you interact with can be dug into, demystified, and explained. I know I often interact with various tools I use as if they were black boxes, either for lack of time, lack of interest, or a fear that I wouldn't understand them if I tried. But let's fight back against that.&lt;/p&gt;
&lt;p&gt;So for this post, let's understand what's going on with python's &lt;a href="http://www.virtualenv.org/"&gt;virtualenv package&lt;/a&gt;.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Do you know my favorite fact about programming? In the end, everything is build from code and you can understand it all -- there is absolutely no magic. With enough effort, almost everything you interact with can be dug into, demystified, and explained. I know I often interact with various tools I use as if they were black boxes, either for lack of time, lack of interest, or a fear that I wouldn't understand them if I tried. But let's fight back against that.&lt;/p&gt;
&lt;p&gt;So for this post, let's understand what's going on with python's &lt;a href="http://www.virtualenv.org/"&gt;virtualenv package&lt;/a&gt;.&lt;/p&gt;


&lt;h2&gt;The Basics&lt;/h2&gt;
&lt;p&gt;Let's start out simple -- the purpose and use of virtualenv. Stealing directly from the project's homepage, "virtualenv is a tool to create isolated Python environments." Well great...what good is that?&lt;/p&gt;
&lt;h3&gt;A little backstory&lt;/h3&gt;
&lt;p&gt;I'll explain by virtue of a story about my travails with scipy. If you don't know, installing scipy/numpy on OS X has historically been...challenging. Numerous system-level dependencies, old versions of numpy pre-installed on the machine both complicate what is already a non-trivial installation procedure. This leads to a ton of posts like &lt;a href="http://stackoverflow.com/questions/11517164/scipy-numpy-matplotlib-troubles-on-osx"&gt;this&lt;/a&gt; or &lt;a href="http://penandpants.com/2012/02/24/install-python/"&gt;this&lt;/a&gt; and even extensive &lt;a href="http://www.thisisthegreenroom.com/2011/installing-python-numpy-scipy-matplotlib-and-ipython-on-lion/"&gt;step-by-step guides&lt;/a&gt;. Although scipy suffers from some complications surrounding required non-python bits (like fortran compilers), the most frequent problem I've had installing is simply having conflicting versions of numpy installed.&lt;/p&gt;
&lt;p&gt;That brings us to Virtualenv, and its use case. Macs come helpfully pre-installed with an old and unhelpful version of numpy.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python -c &lt;span class="s1"&gt;&amp;#39;import numpy; print numpy; print numpy.__version__&amp;#39;&lt;/span&gt;
&amp;lt;module &lt;span class="s1"&gt;&amp;#39;numpy&amp;#39;&lt;/span&gt; from &lt;span class="s1"&gt;&amp;#39;/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/numpy/__init__.pyc&amp;#39;&lt;/span&gt;&amp;gt;
&lt;span class="m"&gt;1&lt;/span&gt;.5.1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Well that won't work well with my hope to use the (very cool) data analysis library &lt;code&gt;pandas&lt;/code&gt;. In fact, the &lt;a href="http://pandas.pydata.org/pandas-docs/stable/install.html"&gt;pandas installation page&lt;/a&gt; kindly points out that it requires numpy 1.6.1 or higher! How can we install pandas without changing the system installed version of numpy? Enter virtualenv.&lt;/p&gt;
&lt;h3&gt;Our very first virtualenv&lt;/h3&gt;
&lt;p&gt;I promised I'd start out with a quick example, so let's show how virtualenv solves our little scipy snafu in a pinch.&lt;/p&gt;
&lt;p&gt;Virtualenvs are their own little world -- by default they are entirely isolated from your system installed python packages. First lets install virtualenv (the last thing we'll need to install globally!) and set up a sample env.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; ~  $ sudo pip install virtualenv
Downloading/unpacking virtualenv
  Running setup.py egg_info &lt;span class="k"&gt;for&lt;/span&gt; package virtualenv

    warning: no files found matching &lt;span class="s1"&gt;&amp;#39;*.egg&amp;#39;&lt;/span&gt; under directory &lt;span class="s1"&gt;&amp;#39;virtualenv_support&amp;#39;&lt;/span&gt;
    warning: no previously-included files matching &lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt; found under directory &lt;span class="s1"&gt;&amp;#39;docs/_templates&amp;#39;&lt;/span&gt;
    warning: no previously-included files matching &lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt; found under directory &lt;span class="s1"&gt;&amp;#39;docs/_build&amp;#39;&lt;/span&gt;
Installing collected packages: virtualenv
  Running setup.py install &lt;span class="k"&gt;for&lt;/span&gt; virtualenv

    warning: no files found matching &lt;span class="s1"&gt;&amp;#39;*.egg&amp;#39;&lt;/span&gt; under directory &lt;span class="s1"&gt;&amp;#39;virtualenv_support&amp;#39;&lt;/span&gt;
    warning: no previously-included files matching &lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt; found under directory &lt;span class="s1"&gt;&amp;#39;docs/_templates&amp;#39;&lt;/span&gt;
    warning: no previously-included files matching &lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt; found under directory &lt;span class="s1"&gt;&amp;#39;docs/_build&amp;#39;&lt;/span&gt;
    Installing virtualenv script to /usr/local/bin
    Installing virtualenv-2.7 script to /usr/local/bin
Successfully installed virtualenv
Cleaning up...
~  $ virtualenv my_first_env
New python executable in my_first_env/bin/python
Installing Setuptools..............................................................................................................................................................................................................................done.
Installing Pip.....................................................................................................................................................................................................................................................................................................................................done.
~  $ &lt;span class="nb"&gt;source&lt;/span&gt; my_first_env/bin/activate
&lt;span class="o"&gt;(&lt;/span&gt;my_first_env&lt;span class="o"&gt;)&lt;/span&gt; ~  $ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt;
hello world
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Excellent! We installed virtualenv on our system using pip, created a virtualenv called &lt;code&gt;my_first_env&lt;/code&gt;, and finally activated it. This means that python is now entirely isolated from system packages. Let's prove it to ourselves by trying to import some packages we know are installed on this machine.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;my_first_env&lt;span class="o"&gt;)&lt;/span&gt; ~  $ python -c &lt;span class="s1"&gt;&amp;#39;import pytz; print pytz&amp;#39;&lt;/span&gt;
Traceback &lt;span class="o"&gt;(&lt;/span&gt;most recent call last&lt;span class="o"&gt;)&lt;/span&gt;:
  File &lt;span class="s2"&gt;&amp;quot;&amp;lt;string&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;1&lt;/span&gt;, in &amp;lt;module&amp;gt;
ImportError: No module named pytz
&lt;span class="o"&gt;(&lt;/span&gt;my_first_env&lt;span class="o"&gt;)&lt;/span&gt; ~  $ python -c &lt;span class="s1"&gt;&amp;#39;import numpy; print numpy&amp;#39;&lt;/span&gt;
Traceback &lt;span class="o"&gt;(&lt;/span&gt;most recent call last&lt;span class="o"&gt;)&lt;/span&gt;:
  File &lt;span class="s2"&gt;&amp;quot;&amp;lt;string&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;1&lt;/span&gt;, in &amp;lt;module&amp;gt;
ImportError: No module named numpy
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And we can also test the same commands outside our virtualenv to confirm they work!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;my_first_env&lt;span class="o"&gt;)&lt;/span&gt; ~  $ deactivate
 ~  $ python -c &lt;span class="s1"&gt;&amp;#39;import pytz; print pytz&amp;#39;&lt;/span&gt;
&amp;lt;module &lt;span class="s1"&gt;&amp;#39;pytz&amp;#39;&lt;/span&gt; from &lt;span class="s1"&gt;&amp;#39;/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/pytz/__init__.pyc&amp;#39;&lt;/span&gt;&amp;gt;
 ~  $ &lt;span class="nb"&gt;source&lt;/span&gt; my_first_env/bin/activate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Interesting. And how about installing that fresh new package we had our eyes on?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;my_first_env&lt;span class="o"&gt;)&lt;/span&gt; ~  $ pip install pandas
Downloading/unpacking pandas
  Downloading pandas-0.12.0.tar.gz &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.2MB&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;3&lt;/span&gt;.2MB downloaded

-----&lt;span class="o"&gt;(&lt;/span&gt;it continues &lt;span class="k"&gt;for&lt;/span&gt; a &lt;span class="k"&gt;while&lt;/span&gt; installing various dependencies&lt;span class="o"&gt;)&lt;/span&gt;-----

Successfully installed pandas python-dateutil pytz six
Cleaning up...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And there we go! We can now happily play around with all of the installed packages inside of our virtual environment and we did it without affecting any other users of this computer, or requiring global install privileges.&lt;/p&gt;
&lt;h2&gt;Well that was magical&lt;/h2&gt;
&lt;p&gt;If you're anything like me, your natural first reaction to a new tool like this is to feel a little uncomfortable. You can go through the motions (perhaps copying from some tutorial you found on a blog) and hope things will still work, but there's no real understanding of how this new tools works. Maybe you even resign yourself to never understanding something and just keep using it the way you were taught, effectively becoming a &lt;a href="http://en.wikipedia.org/wiki/Cargo_cult_programming"&gt;cargo cult programmer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Avoiding that behavior is exactly the point of this blogpost, and I think it's perhaps &lt;strong&gt;the&lt;/strong&gt; most powerful skill for any programmer. Digging into an unfamiliar project and building a mental model of how it works is the essence of programming! If you truly understand how something is put together, you can modify it, improve it, or explain it with ease.&lt;/p&gt;
&lt;p&gt;So for the rest of this post, let's dig in and prove virtualenv isn't magic. We will both be taking this journey together, as I've never dug into its guts either. So let's see what we can figure out.&lt;/p&gt;
&lt;h2&gt;Going to the source&lt;/h2&gt;
&lt;p&gt;So lets crack open &lt;code&gt;virtualenv&lt;/code&gt; and understand what's actually happening.&lt;/p&gt;
&lt;p&gt;There are three main scripts we keep calling to create, activate, and deactivate a virtualenv -- &lt;code&gt;virtualenv&lt;/code&gt;, &lt;code&gt;venv/bin/activate&lt;/code&gt; and &lt;code&gt;deactivate&lt;/code&gt;. Let's deal with creating the environment with &lt;code&gt;virtualenv&lt;/code&gt; before jumping into activation/deactivation.&lt;/p&gt;
&lt;h3&gt;Creating a virtualenv&lt;/h3&gt;
&lt;p&gt;Opening up the file at &lt;code&gt;which virtualenv&lt;/code&gt; drops me into the source:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/python                                                               &lt;/span&gt;
&lt;span class="c1"&gt;# EASY-INSTALL-ENTRY-SCRIPT: &amp;#39;virtualenv==1.10.1&amp;#39;,&amp;#39;console_scripts&amp;#39;,&amp;#39;virtualenv&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;__requires__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;virtualenv==1.10.1&amp;#39;&lt;/span&gt;                                             
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;                                                                      
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pkg_resources&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;load_entry_point&lt;/span&gt;                                      

&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;                                                                       
   &lt;span class="n"&gt;load_entry_point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;virtualenv==1.10.1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;console_scripts&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;virtualenv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)()&lt;/span&gt;       
&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Well that's not very helpful. Looks like running &lt;code&gt;virtualenv&lt;/code&gt; is actually just executing this bit of code. Time to see if we can figure out what &lt;code&gt;load_entry_point&lt;/code&gt; is and what it is actually calling.&lt;/p&gt;
&lt;p&gt;A little googling later, we find &lt;a href="http://stackoverflow.com/a/9615473"&gt;this SO post&lt;/a&gt; on the subject. Looks like in nice python packages, entry points are defined in &lt;code&gt;setup.py&lt;/code&gt; and automatically linked to runnable scripts at installation time. We can download the source from &lt;a href="https://pypi.python.org/pypi/virtualenv"&gt;pypi&lt;/a&gt; and take a look ourselves.&lt;/p&gt;
&lt;p&gt;Sure enough, when we open up &lt;code&gt;setup.py&lt;/code&gt; we see the entry_point dict we were promised:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;setup_params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;                                                            
    &lt;span class="s1"&gt;&amp;#39;entry_points&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;                                                       
        &lt;span class="s1"&gt;&amp;#39;console_scripts&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;                                                
            &lt;span class="s1"&gt;&amp;#39;virtualenv=virtualenv:main&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                                   
            &lt;span class="s1"&gt;&amp;#39;virtualenv-&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;.&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;=virtualenv:main&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;version_info&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;          
        &lt;span class="p"&gt;],&lt;/span&gt;                                                                  
    &lt;span class="p"&gt;},&lt;/span&gt;                                                                      
    &lt;span class="s1"&gt;&amp;#39;zip_safe&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                                                      
    &lt;span class="s1"&gt;&amp;#39;test_suite&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;nose.collector&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                                         
    &lt;span class="s1"&gt;&amp;#39;tests_require&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;nose&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Mock&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;                                      
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Indeed they seem to be linking the runnable &lt;code&gt;virtualenv&lt;/code&gt; python script to the &lt;code&gt;main&lt;/code&gt; function of virtualenv.py. Let's see what that looks like. The content of the main function appears to roughly follow these steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Build an option parser with &lt;code&gt;optparse&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Check if the script was called with the &lt;code&gt;--python&lt;/code&gt; interpreter option and possibly exit.&lt;/li&gt;
&lt;li&gt;Take actions based on various command line options&lt;/li&gt;
&lt;li&gt;Call the &lt;code&gt;create_environment&lt;/code&gt; method!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Well now that last one sounds quite relevant! Here's the full text of the create_environment method:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_environment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;home_dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;site_packages&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;clear&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                                   
                       &lt;span class="n"&gt;unzip_setuptools&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                                                       
                       &lt;span class="n"&gt;prompt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;search_dirs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;never_download&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                          
                       &lt;span class="n"&gt;no_setuptools&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;no_pip&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;symlink&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;                             
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;                                                                                              &lt;/span&gt;
&lt;span class="sd"&gt;    Creates a new environment in ``home_dir``.                                                       &lt;/span&gt;

&lt;span class="sd"&gt;    If ``site_packages`` is true, then the global ``site-packages/``                                 &lt;/span&gt;
&lt;span class="sd"&gt;    directory will be on the path.                                                                   &lt;/span&gt;

&lt;span class="sd"&gt;    If ``clear`` is true (default False) then the environment will                                   &lt;/span&gt;
&lt;span class="sd"&gt;    first be cleared.                                                                                &lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;                                                                                              
    &lt;span class="n"&gt;home_dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lib_dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inc_dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bin_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;path_locations&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;home_dir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                                   

    &lt;span class="n"&gt;py_executable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;install_python&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;                                                  
        &lt;span class="n"&gt;home_dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lib_dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inc_dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bin_dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                                                         
        &lt;span class="n"&gt;site_packages&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;site_packages&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;clear&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;symlink&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;symlink&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;                                  

    &lt;span class="n"&gt;install_distutils&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;home_dir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                                                                      

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;no_setuptools&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;                                                                            
        &lt;span class="n"&gt;install_sdist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Setuptools&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;setuptools-*.tar.gz&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;py_executable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;search_dirs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;               
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;no_pip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;                                                                               
            &lt;span class="n"&gt;install_sdist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Pip&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pip-*.tar.gz&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;py_executable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;search_dirs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                         

    &lt;span class="n"&gt;install_activate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;home_dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bin_dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prompt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we're getting somewhere! It looks like the basic steps are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Get a bunch of path locations based on the &lt;code&gt;home_dir&lt;/code&gt; path&lt;/li&gt;
&lt;li&gt;Install python inside our environment and return a path to the executable&lt;/li&gt;
&lt;li&gt;Install some subset of &lt;code&gt;distutils&lt;/code&gt;, &lt;code&gt;setuptools&lt;/code&gt; and &lt;code&gt;pip&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Install the &lt;code&gt;activate&lt;/code&gt; scripts into this new virtualenv&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And that's the essence of what running &lt;code&gt;virtualenv&lt;/code&gt; does: it defines paths for the interpreter, libraries and binaries; installs the interpreter and installation-related python packages; and it installs the &lt;code&gt;activate&lt;/code&gt; script so you can activate it. And we now understand what goes into creating a new virtualenv.&lt;/p&gt;
&lt;h3&gt;Activating and Deactivating&lt;/h3&gt;
&lt;p&gt;So that leaves the question of what &lt;code&gt;activate&lt;/code&gt; and &lt;code&gt;deactivate&lt;/code&gt; are up to. We can inspect the activate script easily enough by running &lt;code&gt;vim my_first_env/bin/activate&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The first thing we notice is that a bash function &lt;code&gt;deactivate&lt;/code&gt; is defined immediately. We'll get back to this later in this section, but this is actually the definition of the &lt;code&gt;deactivate&lt;/code&gt; method we call to leave the virtualenv. The relevant lines are so brief, you might miss them entirely:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;_OLD_VIRTUAL_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$PATH&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;                                                       
&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$VIRTUAL_ENV&lt;/span&gt;&lt;span class="s2"&gt;/bin:&lt;/span&gt;&lt;span class="nv"&gt;$PATH&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;                                                   
&lt;span class="nb"&gt;export&lt;/span&gt; PATH
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that we're saving the old &lt;code&gt;PATH&lt;/code&gt; and making a new one, with our local virtualenv prepended! This means that the next time we run &lt;code&gt;python&lt;/code&gt;, we'll get the interpreter we installed into our virtualenv, which is pointed at all our own libraries instead of the default system-installed interpreter. With that in mind, let's look at the &lt;code&gt;deactivate&lt;/code&gt; function.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;deactivate &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;                                                                 
    &lt;span class="nb"&gt;unset&lt;/span&gt; pydoc                                                                 

    &lt;span class="c1"&gt;# reset old environment variables                                           &lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -n &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$_OLD_VIRTUAL_PATH&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;                                       
        &lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$_OLD_VIRTUAL_PATH&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;                                               
        &lt;span class="nb"&gt;export&lt;/span&gt; PATH                                                             
        &lt;span class="nb"&gt;unset&lt;/span&gt; _OLD_VIRTUAL_PATH                                                 
    &lt;span class="k"&gt;fi&lt;/span&gt;                                                                          
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -n &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$_OLD_VIRTUAL_PYTHONHOME&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;                                 
        &lt;span class="nv"&gt;PYTHONHOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$_OLD_VIRTUAL_PYTHONHOME&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;                                   
        &lt;span class="nb"&gt;export&lt;/span&gt; PYTHONHOME                                                       
        &lt;span class="nb"&gt;unset&lt;/span&gt; _OLD_VIRTUAL_PYTHONHOME                                           
    &lt;span class="k"&gt;fi&lt;/span&gt;                                                                          

    &lt;span class="c1"&gt;# This should detect bash and zsh, which have a hash command that must      &lt;/span&gt;
    &lt;span class="c1"&gt;# be called to get it to forget past commands.  Without forgetting          &lt;/span&gt;
    &lt;span class="c1"&gt;# past commands the $PATH changes we made may not be respected              &lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -n &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$BASH&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; -o -n &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$ZSH_VERSION&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;                               
        &lt;span class="nb"&gt;hash&lt;/span&gt; -r &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;/dev/null                                                     
    &lt;span class="k"&gt;fi&lt;/span&gt;                                                                          

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -n &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$_OLD_VIRTUAL_PS1&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;                                        
        &lt;span class="nv"&gt;PS1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$_OLD_VIRTUAL_PS1&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;                                                 
        &lt;span class="nb"&gt;export&lt;/span&gt; PS1                                                              
        &lt;span class="nb"&gt;unset&lt;/span&gt; _OLD_VIRTUAL_PS1                                                  
    &lt;span class="k"&gt;fi&lt;/span&gt;                                                                          

    &lt;span class="nb"&gt;unset&lt;/span&gt; VIRTUAL_ENV                                                           
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; ! &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;nondestructive&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;                                     
    &lt;span class="c1"&gt;# Self destruct!                                                            &lt;/span&gt;
        &lt;span class="nb"&gt;unset&lt;/span&gt; -f deactivate                                                     
    &lt;span class="k"&gt;fi&lt;/span&gt;                                                                          
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The important part here is the resetting of old environment variables (notably &lt;code&gt;PATH&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;You can notice other details in this file, like the setting/unsetting of your &lt;a href="http://www.cyberciti.biz/tips/howto-linux-unix-bash-shell-setup-prompt.html"&gt;shell prompt&lt;/a&gt; to include the name of the currently active virtualenv.&lt;/p&gt;
&lt;p&gt;And that's it -- you've uncovered the basics of how virtualenv works!&lt;/p&gt;
&lt;h2&gt;Just the beginning&lt;/h2&gt;
&lt;p&gt;Just like that, we've taken a nontrivial tool and pulled it apart into understandable pieces. I certainly didn't understand every part of what we found immediately (and that's perfectly okay and expected!), but through some persistent searching and effort, it all makes sense. And every time I go through this process with a new tool, I find myself understanding more and more of what is going on, and gaining greater familiarity with various python tools.&lt;/p&gt;
&lt;p&gt;On the subject of virtualenv in particular, I've since discovered &lt;a href="http://blip.tv/pycon-us-videos-2009-2010-2011/pycon-2011-reverse-engineering-ian-bicking-s-brain-inside-pip-and-virtualenv-4899496"&gt;this excellent overview of the its guts&lt;/a&gt; from PyCon 2011. Take a look if you're interested in even more detail on the subject (like why does using a particular python interpreter change where I look up system packages).&lt;/p&gt;
&lt;p&gt;So go find something you don't understand! I've been elbow deep in learning the various horrors of python packaging lately, so perhaps I'll continue this series with a look into some aspect of that. Either way, I hope I've encouraged you to not be afraid of jumping into unfamiliar territory and transforming code from mysterious to understood.&lt;/p&gt;</content></entry><entry><title>"Coding-Free Interview Tips"</title><link href="http://www.locallyoptimal.com/blog/2013/10/22/coding-free-interview-tips/" rel="alternate"></link><published>2013-10-22T23:48:00-07:00</published><updated>2013-10-22T23:48:00-07:00</updated><author><name>Scott Triglia</name></author><id>tag:www.locallyoptimal.com,2013-10-22:/blog/2013/10/22/coding-free-interview-tips/</id><summary type="html">&lt;p&gt;Interviews are a tricky thing to administer well. I still remember overflowing with nervous energy when I interviewed with Yelp and Google a couple years ago, wondering whether I'd make a complete fool of myself when it came time for the inevitable programming challenge. I stumbled through the various questions, handling some easily and getting completely flustered by others, and overall was relieved when the ordeal was over. Perhaps most importantly, the whole time I had basically zero clue what I was doing or how I should be presenting myself -- I was simply going with the flow and testing out whatever anecdotal advice I picked up along the way.&lt;/p&gt;
&lt;p&gt;Having spent a year or so on the other side of the table, there are several easy ways to improve how you come across in an interview -- and none of them involve cramming!&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Interviews are a tricky thing to administer well. I still remember overflowing with nervous energy when I interviewed with Yelp and Google a couple years ago, wondering whether I'd make a complete fool of myself when it came time for the inevitable programming challenge. I stumbled through the various questions, handling some easily and getting completely flustered by others, and overall was relieved when the ordeal was over. Perhaps most importantly, the whole time I had basically zero clue what I was doing or how I should be presenting myself -- I was simply going with the flow and testing out whatever anecdotal advice I picked up along the way.&lt;/p&gt;
&lt;p&gt;Having spent a year or so on the other side of the table, there are several easy ways to improve how you come across in an interview -- and none of them involve cramming!&lt;/p&gt;


&lt;p&gt;The main thing I've realized is there are several traits of excellent interviewees that have nothing to do with how good a candidate they were and everything to do with how well they conveyed that information to me. I dislike the typical interview advice because it emphasizes practice and repetition as a tool to make you look better. Instead, I want this article to supply advice which will let you confidently showcase your best featuresâ€¦because one of the big challenges of interviewing is deciphering when you are sitting in front of an awesome candidate who just isn't making that fact obvious.&lt;/p&gt;
&lt;h3&gt;Trick #1 -- Know your most impressive accomplishments&lt;/h3&gt;
&lt;p&gt;A frequent pattern with candidates is the kitchen sink approach to prior experience. You'll see someone's GPA from college, next to four class projects from school, next to their extracurriculars in high school -- sometimes spilling over to multiple pages.&lt;/p&gt;
&lt;p&gt;The simple fact is I as your interviewer have precious little time to determine whether you are a student who did a bunch of standard course projects because you were forced to or a crazy hacker who has built his own custom OS. The more individual things you place on your resume, the more likely I am to simply talk to you about the most recent thing one which seems relevant. We will only have time to probably discuss a single project in depth, so it's in your interest to have your best work (and only your best work) on display.&lt;/p&gt;
&lt;p&gt;In a perfect world, your resume comes to me with only a few, highly impressive accomplishments. I'll often ask candidates to talk me through whichever project they think best sells their skills, and I want this to be an easy conversation. What sort of conversation? Well that leads into the next sectionâ€¦&lt;/p&gt;
&lt;h3&gt;Trick #2 -- Sell your passion&lt;/h3&gt;
&lt;p&gt;If you have been coding for much time at all, you probably have stories. I'm talking about the intricate bugs that took hours of prying before you deciphered them. Or that time you learned about genetic algorithms and spent a weekend playing with them and researching various approaches. Or maybe just a story from your previous job, where you were faced with a hard technical problem and found an innovative solution.&lt;/p&gt;
&lt;p&gt;What do these all have in common? They show me you care -- a lot. That if we hire you, and throw a difficult unsolved problem at you, you are going to dismantle it and come out with a solution. I want you to have something that gets you up in the morning, that makes you want to pop open a terminal and get to it. I've seen candidates get excited about all sorts of areas and honestly it does not really matter to me what you care about, as long as I can see that fire in your eyes.&lt;/p&gt;
&lt;p&gt;I'm happy to discuss anything from machine learning, to testing methodology, to your favorite languageâ€¦what I'm looking for is your ability to carry on an intelligent conversation about a subject you care about.&lt;/p&gt;
&lt;h3&gt;Trick #3 -- Know why you're interested&lt;/h3&gt;
&lt;p&gt;If there's one question I'm sure that basically every company in the Bay Area asks, it's "why do you want to come work for $MY_COMPANY?" And for most places that aren't gigantic MegaCorps, the candidate's answer is an important part of the hiring process.&lt;/p&gt;
&lt;p&gt;So have an answer ready! Do your homework and get a sense of the broad areas you could fill if you joined us. Are you interested in backend or fronted work? Do you want to be writing something that real users interact with or would you rather be optimizing some widget deep in the stack? Why are we a better fit than the python shop down the road?&lt;/p&gt;
&lt;p&gt;My goal with these questions is to get an idea of how much a candidate cares, and whether they'll be able/willing/interested in taking charge of their area. New grads that just want a job are plenty relatable (jobs are good!), but will always look less dedicated than someone who really cares about the application.&lt;/p&gt;
&lt;p&gt;And there theoretically are those coders out there who are such consummate professionals that they really don't care where they're working and this whole discussion is pointless. But I haven't met one yet. Most of the best coders I know are doing it because they have a very clear interest in the product and challenges that define us as a company. Have a good sense of where you fit in wherever you're interviewing, and make sure you explain your interest&lt;/p&gt;
&lt;h3&gt;It's all about your ability&lt;/h3&gt;
&lt;p&gt;In the end, interviews aren't complicated. The basic idea is to sit down with a candidate and assess whether they will excel at their job. For me, that involves looking for a complementary mixture of independence, ability to understand code, a passion for learning more and improving, and an honest interest in the job I'm offering. Most candidates will be stronger in some of these areas than others, and that's expected. But I can confidently tell you that the most important thing you can do in an interview is come into it with a game plan, and know your personal strengths and how to show them off. Your interviewer is not a mind reader, and you will see great returns from showing interest and wisely selling your skills.&lt;/p&gt;</content></entry><entry><title>"Sins of the Test"</title><link href="http://www.locallyoptimal.com/blog/2013/02/21/sins-of-the-test/" rel="alternate"></link><published>2013-02-21T22:27:00-08:00</published><updated>2013-02-21T22:27:00-08:00</updated><author><name>Scott Triglia</name></author><id>tag:www.locallyoptimal.com,2013-02-21:/blog/2013/02/21/sins-of-the-test/</id><summary type="html">&lt;p&gt;We all make mistakesâ€¦some more embarrassing than others in hindsight. I always really appreciate when programmers I look up to make a point of pointing out their own faults, so I figured it was only fair for me to do the same.&lt;/p&gt;
&lt;p&gt;So in that spirit, let's talk about where I've gone wrong! Looking back on the tests I've written in the last six months has made me realize several things I'd change if I could write them again.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;We all make mistakesâ€¦some more embarrassing than others in hindsight. I always really appreciate when programmers I look up to make a point of pointing out their own faults, so I figured it was only fair for me to do the same.&lt;/p&gt;
&lt;p&gt;So in that spirit, let's talk about where I've gone wrong! Looking back on the tests I've written in the last six months has made me realize several things I'd change if I could write them again.&lt;/p&gt;


&lt;h2&gt;abusing subclasses&lt;/h2&gt;
&lt;p&gt;First up -- the misuse of classes and inheritance.&lt;/p&gt;
&lt;p&gt;A mere six months ago, I wrote something approximating the following series of tests for a new feature I was rolling out:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;experiment_framework&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;configure_experiment&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;our_logic_module&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;method_under_test&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestSecretFeatureBase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;__test__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;  &lt;span class="c1"&gt;# Make sure this class is purely abstract&lt;/span&gt;
    &lt;span class="n"&gt;activate_feature&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
    &lt;span class="n"&gt;necessary_input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
    &lt;span class="n"&gt;expected_output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_class_vars_are_set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Enforce class variables being set in the subclass&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;activate_feature&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;necessary_input&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expected_output&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_output_of_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;The test we actually care about&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;configure_experiment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;my_secret_feature&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;activate_feature&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;method_under_test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;necessary_input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;expected_output&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestSecretFeatureOff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# Test what happens when we turn our feature off!&lt;/span&gt;
    &lt;span class="n"&gt;activate_feature&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
    &lt;span class="n"&gt;necessary_input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;some required arg&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;expected_output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;magic&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestSecretFeatureOn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# Test what happens when we turn our feature on!&lt;/span&gt;
    &lt;span class="n"&gt;activate_feature&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="n"&gt;necessary_input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;some required arg&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;expected_output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;more magic&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's briefly cover what this was designed to do. We have a method &lt;code&gt;method_under_test&lt;/code&gt; that we want to run with some necessary arguments, testing each time that the output is what we expect. In particular, we want to test this method with a new secret feature turned both on and off.&lt;/p&gt;
&lt;p&gt;So what's bad about this? The big lesson I learned from looking back on this was that I had painfully abused the concept of a test suite in an attempt to be DRY. Note that the above solution has no single test suite that can be called -- in fact each test is segregated into its own test suite! Nasty! And the only reason I did all this was to create a few real test cases (the classes TestSecretFeatureOn/TestSecretFeatureOff here) with a bunch of variables that are required to be defined. Additionally, you can see that I've introduces a new test for every subclass that does nothing but ensure I am overriding the required parameters...at absolute best this test is irrelevant to the core functionality and distracting.&lt;/p&gt;
&lt;p&gt;Instead, I should have written the entire base class as a simple helper function with just &lt;code&gt;necessary_input&lt;/code&gt; and &lt;code&gt;activate_feature&lt;/code&gt; as arguments. The tests themselves could then be grouped into a single meaningful (and useful!) test suite and the &lt;code&gt;test_class_vars_are_set&lt;/code&gt; eliminated entirely since it would be implicitly required by the function signature. Any further alterations I do to the code this covers can be easily and quickly tested by running a single test suite instead of having to run many small ones.&lt;/p&gt;
&lt;p&gt;Check out the improved code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run_method_under_test_with_experiment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;activate_feature&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;necessary_input&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Runs method_under_test with our secret experiment set according to the&lt;/span&gt;
&lt;span class="sd"&gt;    passed flag and returns the result.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;configure_experiment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;my_secret_feature&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;activate_feature&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;method_under_test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;necessary_input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestSecretFeature&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Test suite covering the soon-to-be-released Secret Feature&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;necessary_input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;some required arg&amp;#39;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_feature_off&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;run_method_under_test_with_experiment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;necessary_input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;magic&amp;#39;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_feature_on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;run_method_under_test_with_experiment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;necessary_input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;more magic&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Just like that, we have collapsed all our tests into a single descriptive test suite and we can reliably know that classes always contain meaningful collections of tests. Maybe most importantly, it's much simpler for the next poor dev who has to unravel the goal of my tests.&lt;/p&gt;
&lt;h2&gt;test method names&lt;/h2&gt;
&lt;p&gt;Next up, needlessly abbreviating test method/suite names!&lt;/p&gt;
&lt;p&gt;In non-test code, there are some plausible arguments that long method names are cumbersome -- you will often call them multiple places and some additional brevity can be worthwhile. In my experience with tests however, something like 95% of the test methods or test suites I name will &lt;em&gt;never be typed again&lt;/em&gt; outside the method/class definition. This means long names not only don't cost me anything, they're essentially a free chance to eliminate docstrings that may be otherwise unnecessary.&lt;/p&gt;
&lt;p&gt;Not too much else to say here, just consider the following before and after from some only-slightly-sanitized production code of mine:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FilteringTest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Tests that low scoring candidates are removed by filtering.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_return_few_candidates&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Test _filter_candidates correctly prunes results, below the request&amp;#39;s threshold.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Instead, let's just express those docstrings directly in the names. Easier to read, easier to debug if you only see failing test names, everyone wins!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FilterCandidatesTest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_candidates_below_score_threshold_are_not_returned&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;too few test suites&lt;/h2&gt;
&lt;p&gt;A simple one, but something that's been on my mind. If we're using test classes 90% of the time for just organization purposes, then what use is it to clump together a large number of tests in a single suite? If I'm trying to tweak a particular feature, but have to choose between running either a single unit test or far too many of them, I'm probably not going to be doing small, iterative changes with lots of testing because it'll just be too slow.&lt;/p&gt;
&lt;p&gt;Instead, break into a new class per distinct functionality. If you're awesome, this probably looks suspiciously close to one class per method under test, and a relatively small number of classes per object under test. If you're like me and still working toward that goal, you can still aim for making small, focused suites so that changes to code will break relatively few suites, and a single suite can be quickly re-run. Admittedly, this type of organization does depend on the particular choices of your chosen testing framework and its mechanism for determining what a suite is.&lt;/p&gt;
&lt;h2&gt;not listening to what tests are telling me&lt;/h2&gt;
&lt;p&gt;If I had to sum up the most important thing I'd learned in the last year from testing it's this point -- if it's hard to test something (class, function, whatever), you should assume there is room (maybe a lot of it) for improving it. This almost seems pointless to say, except that I cannot tell you how many times I've spent a day bumbling my way through writing/modifying just a couple tests on an old, crufty object without bothering any refactoring of the thing under test.&lt;/p&gt;
&lt;p&gt;To rephrase, if something sucks to test, assume guilt until innocence is proven. It's almost never a bad exercise to look at your code with a critical eye toward untangling mixed responsibilities, ugly dependences, or sheer bloat. Worst case scenario, you don't see anything that can be fixed and you soldier on. But more likely, you will see something you can tweak to make both future coding and testing easier. Win win.&lt;/p&gt;
&lt;p&gt;Know what rarely is a pain to test? The best code I've written. In fact, it's also often the best tested. Curiousâ€¦&lt;/p&gt;
&lt;h2&gt;always improving&lt;/h2&gt;
&lt;p&gt;Well that's enough of my rambling, but I hope this gives you a few ideas for attacking your own tests. If nothing else, it is an excellent exercise to step back from the daily grind and trying to look for longer-term patterns you see. It's far too easy to get stuck in local optima because they're familiar, even if you yourself have experienced better! Here's to always improving.&lt;/p&gt;</content></entry><entry><title>"Elegant n-gram generation in Python"</title><link href="http://www.locallyoptimal.com/blog/2013/01/20/elegant-n-gram-generation-in-python/" rel="alternate"></link><published>2013-01-20T12:51:00-08:00</published><updated>2013-01-20T12:51:00-08:00</updated><author><name>Scott Triglia</name></author><id>tag:www.locallyoptimal.com,2013-01-20:/blog/2013/01/20/elegant-n-gram-generation-in-python/</id><summary type="html">&lt;p&gt;A quick few snippets of code today -- solving how to compactly and elegantly generate n-grams from your favorite iterable.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;A quick few snippets of code today -- solving how to compactly and elegantly generate n-grams from your favorite iterable.&lt;/p&gt;


&lt;p&gt;For starters, let's talk about generating all bigrams from a python list (or anything we can iterate over). We'll write it generally so it can work over lists, strings, or whatever else you care to make iterable. Finally, I'll show the more general extension at the end.&lt;/p&gt;
&lt;h2&gt;The obvious way&lt;/h2&gt;
&lt;p&gt;So our first shot here can be done with a single walk through our list:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;input_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;all&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;this&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;happened&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;more&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;or&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;less&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find_bigrams&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input_list&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;bigram_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;bigram_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;input_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;input_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;bigram_list&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You could easily suggest that this for loop may be better written with zip() instead of just range(), but the basic idea would be the same -- iterate over each element and manually combine it with the one directly following it.&lt;/p&gt;
&lt;p&gt;One thing I will mention here is that I'm not counting the first or last terms in their own bigrams (i.e. there is no bigram created that ends with 'all' or starts with 'less'). There are variations we could create that would include such bigrams (usually using some sort of padding value for the missing terms) but I will ignore them for the remainder of this discussion.&lt;/p&gt;
&lt;p&gt;So we have the minimal python code to create the bigrams, but it feels very low-level for pythonâ€¦more like a loop written in C++ than in python. Let's change that.&lt;/p&gt;
&lt;h2&gt;Slicing and Zipping&lt;/h2&gt;
&lt;p&gt;Let's take advantage of python's &lt;a href="http://docs.python.org/2/library/functions.html#zip"&gt;zip builtin&lt;/a&gt; to build our bigrams. Zip takes a list of iterables and constructs a new list of tuples where the first list contains the first elements of the inputs, the second list contains the second elements of the inputs, and so on. Given this fact, it will construct our bigrams for us if we can just pass it two lists that contain the first and second elements of each bigram.&lt;/p&gt;
&lt;p&gt;In fact, a little thought shows us that we can do this by simply passing in our original &lt;code&gt;input_list&lt;/code&gt; once normally and once offset by one element. This gives us our second version of &lt;code&gt;find_bigrams&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;input_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;all&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;this&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;happened&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;more&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;or&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;less&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find_bigrams&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input_list&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input_list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;input_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Hey now that is something you can show off around the office!&lt;/p&gt;
&lt;h2&gt;Generalizing&lt;/h2&gt;
&lt;p&gt;Okay but seriously, let's not get too excited. We still need to pass in a bunch of arguments to zip(), arguments which will have to change if we want to do anything but generate bigrams. So let's fix that. What if we want to generate n-grams from a list and we wish to cleanly do that in a general way?&lt;/p&gt;
&lt;p&gt;If we write out what our zip() invocation looks like for various n-grams, we see a pattern:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Bigrams&lt;/span&gt;
&lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input_list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;input_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:])&lt;/span&gt;
&lt;span class="c1"&gt;# Trigrams&lt;/span&gt;
&lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input_list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;input_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:],&lt;/span&gt; &lt;span class="n"&gt;input_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:])&lt;/span&gt;
&lt;span class="c1"&gt;# and so on&lt;/span&gt;
&lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input_list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;input_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:],&lt;/span&gt; &lt;span class="n"&gt;input_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:],&lt;/span&gt; &lt;span class="n"&gt;input_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Notice the pattern? If we could construct those arguments programmatically, just given the N we want to generate n-grams for, we'd be all set! So let's do that. We're going to leverage two things -- list comprehensions and the &lt;code&gt;*&lt;/code&gt; operator to build up our arguments.&lt;/p&gt;
&lt;p&gt;We can easily write a list comprehension to build up the list of inputs - &lt;code&gt;[input_list[i:] for i in range(n)]&lt;/code&gt;. After we've done this, we need to take a list of arguments and unlist them. This is the exact purpose of the underused &lt;code&gt;*&lt;/code&gt; operator in python. It is perfect for our purpose, taking a list and passing all elements into a function call.&lt;/p&gt;
&lt;p&gt;And now we have all our ingredients organized for our general find_ngram method.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;input_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;all&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;this&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;happened&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;more&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;or&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;less&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find_ngrams&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input_list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;input_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And there you go! It is worth noting that this is probably a suggestion too clever for it's own goodâ€¦but it's also a great opportunity to practice the application of list comprehensions and the itertools module. Happy hacking!&lt;/p&gt;</content></entry><entry><title>"A New Year"</title><link href="http://www.locallyoptimal.com/blog/2013/01/12/a-new-year/" rel="alternate"></link><published>2013-01-12T15:54:00-08:00</published><updated>2013-01-12T15:54:00-08:00</updated><author><name>Scott Triglia</name></author><id>tag:www.locallyoptimal.com,2013-01-12:/blog/2013/01/12/a-new-year/</id><summary type="html">&lt;p&gt;All the cool kids wrote New Year posts, so I figured that was excuse enough for me to chime in with a quick one.&lt;/p&gt;
&lt;p&gt;Writing here has been a nice outlet for the end of 2012, but I figure now's as good a time as any to make a couple â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;All the cool kids wrote New Year posts, so I figured that was excuse enough for me to chime in with a quick one.&lt;/p&gt;
&lt;p&gt;Writing here has been a nice outlet for the end of 2012, but I figure now's as good a time as any to make a couple minor changes.&lt;/p&gt;
&lt;p&gt;First, I'm going to actually bother telling people this exists. Theoretically I was waiting until I was more comfortable with the writing, or until I decided this would actually be of interest to other people, or some other unspecified timeâ€¦but better now than not at all.&lt;/p&gt;
&lt;p&gt;Second, I'm planning on publishing a lot more short, one-off posts with little snippets of code I've found useful. Back in grad school I found many a solution in the tiny posts &lt;a href="http://desk.stinkpot.org:8080/tricks/"&gt;from the desk of Stinkpot&lt;/a&gt; and would love to save other people some frustration in the same way.&lt;/p&gt;
&lt;p&gt;So Happy New Year and here's to a great 2013.&lt;/p&gt;</content></entry><entry><title>"Hiding complexity with Context Managers"</title><link href="http://www.locallyoptimal.com/blog/2012/10/21/hiding-complexity-with-context-managers/" rel="alternate"></link><published>2012-10-21T14:53:00-07:00</published><updated>2012-10-21T14:53:00-07:00</updated><author><name>Scott Triglia</name></author><id>tag:www.locallyoptimal.com,2012-10-21:/blog/2012/10/21/hiding-complexity-with-context-managers/</id><summary type="html">&lt;p&gt;Very reliably, my favorite part of programming is the simple process of taking a series of steps that I used to have to do by hand and packaging it up in a nice, reusable form. It's pretty wonderful that it remains just as rewarding now as it did when I wrote my first function in C++ 8 years ago.&lt;/p&gt;
&lt;p&gt;So in that spirit, I figured I'd write down a few thoughts on python's context managers -- the latest built-in feature that I've grown quite attached to. &lt;/p&gt;
</summary><content type="html">&lt;p&gt;Very reliably, my favorite part of programming is the simple process of taking a series of steps that I used to have to do by hand and packaging it up in a nice, reusable form. It's pretty wonderful that it remains just as rewarding now as it did when I wrote my first function in C++ 8 years ago.&lt;/p&gt;
&lt;p&gt;So in that spirit, I figured I'd write down a few thoughts on python's context managers -- the latest built-in feature that I've grown quite attached to. &lt;/p&gt;


&lt;h2&gt;The basics&lt;/h2&gt;
&lt;p&gt;Context managers are, at their most basic, blocks of code which do something when they are entered and exited. You can see the full description of them in the excellent &lt;a href="http://docs.python.org/reference/datamodel.html#context-managers"&gt;python docs page&lt;/a&gt; or &lt;a href="http://www.python.org/dev/peps/pep-0343/"&gt;PEP 343&lt;/a&gt;. Suffice it to say, they execute code when their &lt;code&gt;with&lt;/code&gt; block is entered and exited, allowing nice convenience methods to exist. An excellent (built in!) example is reading from a file while making sure to close it again at the endâ€¦in fact you likely have used this already once or twice.&lt;/p&gt;
&lt;p&gt;Old and busted:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;input_file = open(&amp;#39;config.txt&amp;#39;, &amp;#39;r&amp;#39;)
print input_file.read()
input_file.close()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nice and convenient:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;with open(&amp;#39;config.txt&amp;#39;, &amp;#39;r) as input_file:
    print input_file.read()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Behind the scenes, the &lt;code&gt;with&lt;/code&gt; statement is opening the file, binding the file object to the input_file variable, and then closing the file again after we exit the code block. Nothing complicated at all, but this provides a very nice tool for creating really pretty contexts that can do a lot of the heavy lifting behind the scenes.&lt;/p&gt;
&lt;h2&gt;Writing our own&lt;/h2&gt;
&lt;p&gt;So that's the basic idea, but the natural next step is wanting to write one of your own! You can consult the python docs to learn how to set up your own context manager class, but I prefer leveraging a simpler approach where possible.&lt;/p&gt;
&lt;p&gt;Our secret is going to be &lt;code&gt;contextlib&lt;/code&gt;'s &lt;code&gt;contextmanager&lt;/code&gt; decorator. Using it is as simple as decorating an appropriate function with &lt;code&gt;@contextmanager&lt;/code&gt;. Let's write a toy example to show off the various parts of flow through a context manager.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;contextlib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;contextmanager&lt;/span&gt;

&lt;span class="nd"&gt;@contextmanager&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;our_toy_context_manager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;enter_msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exit_msg&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;enter_msg&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;returned value!&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;exit_msg&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;our_toy_context_manager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;entering!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;exiting!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;inner_msg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;inner_msg&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When run, this produces:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~/Desktop  $ python toy_context_manager.py 
entering!
returned value!
exiting!
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's dive into how this decorator works. Keep in mind we can separate context managers into "before" and "after" blocks of code.&lt;/p&gt;
&lt;p&gt;The first thing to notice is the &lt;code&gt;yield&lt;/code&gt; statement in &lt;code&gt;our_toy_context_manager&lt;/code&gt;. This yield marks the point where our context manager is done with the "before" portion of its code and returns an object to the calling code. In particular, when we write something like &lt;code&gt;with foo() as bar:&lt;/code&gt;, the &lt;code&gt;bar&lt;/code&gt; variable will refer to whatever is returned by this yield. In our example, the value returned is a string and it gets referred to by the &lt;code&gt;inner_msg&lt;/code&gt; variable, and summarily printed.&lt;/p&gt;
&lt;p&gt;After we are done executing the code inside our with context, we now return to &lt;code&gt;our_toy_context_manager&lt;/code&gt; and execute the remaining code after the yield. And that's it! So while this example is quite contrived, you can see how easy it is to construct your own context managers that do something less trivial. In fact, let's try just that.&lt;/p&gt;
&lt;h2&gt;The big leagues&lt;/h2&gt;
&lt;p&gt;In the spirit of my recent preoccupation with effectively testing larger systems, let's assume that we have a moderately complicated &lt;code&gt;Frobinator&lt;/code&gt; object. Moreover, this object is used by a lot of other systems, and our corporate overlords have decreed that we must make a method available for easily mocking out calls to the &lt;code&gt;Frobinator.frobinate&lt;/code&gt; method and specifying the return value.&lt;/p&gt;
&lt;p&gt;You and I, being the knowledgeable stewards of the &lt;code&gt;Frobinator&lt;/code&gt; that we are, know that there are significant complications involved in setting up a proper mock for testing, including limiting some logging that happens on every request and disabling some built in caching infrastructure. So we have our work cut out for us. Luckily, context managers nicely compliment the setup, assert, teardown format of mocks in tests. In our case, we need to set up a valid &lt;code&gt;Frobinator&lt;/code&gt;, while simultaneously disabling caching and silencing logging. &lt;/p&gt;
&lt;p&gt;Our game plan is to construct a context manager called &lt;code&gt;mock_frobinator&lt;/code&gt; which will have already disabled logging and caching, and will be a mock.Mock instance on the &lt;code&gt;frobinate&lt;/code&gt; method so consumers can do any asserting they want on the testing side. Last but not least, we will set up our context manager to take a &lt;code&gt;results&lt;/code&gt; variable as an argument and that will be set to be the return value of &lt;code&gt;Frobinator.frobinate&lt;/code&gt; whenever it is called. So let's gather what we've learned so far and write this.&lt;/p&gt;
&lt;p&gt;Or if you prefer, just look below =)&lt;/p&gt;
&lt;p&gt;``` lang:python
from mock import Mock
from mock import patch
from contextlib import contextmanager&lt;/p&gt;
&lt;p&gt;@contextmanager
def mock_frobinator(results):
    """A mocked Frobinate object for convenient testing.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Patches out both logging and caching to simplify execution.

Yields a Mock for the frobinate method.

Args:
    results - This will be set to always be the return value of calling Frobinator.frobinate.
&amp;quot;&amp;quot;&amp;quot;
frobinator = Frobinator()
mocked_frobinate = Mock(return_value=results)

with patch.object(frobinator, &amp;#39;frobinate&amp;#39;, mocked_frobinate):
    with patch.object(frobinator, &amp;#39;get_cached_results&amp;#39;, Mock(return_value=None)):
            with patch.object(frobinator, &amp;#39;write_to_log&amp;#39;, Mock()):
                yield mocked_frobinate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == '&lt;strong&gt;main&lt;/strong&gt;':
    results = []
    with mock_frobinator(results) as mocked_frobinate:
        assert mocked_frobinate.call_count == 0
        res = mocked_frobinate()
        assert mocked_frobinate.call_count == 1
        assert res == results
```&lt;/p&gt;
&lt;p&gt;And just like that, we have a fairly complicated testing fixture hidden away from view, and a nice, convenient context manager exposed for others to use. And if we need to change what we're mocking out, or even disable a new part of the Frobinator, we can do it in a single place instead of every test which uses it.&lt;/p&gt;
&lt;h2&gt;Final thoughts&lt;/h2&gt;
&lt;p&gt;Context managers are a great toolâ€¦not least of all because they provide a new metaphor (enter, do stuff, exit) for you to use where it makes the most sense. And after all that's the real benefit of diving into all these python standard library modules -- the more tricks you have up your sleeve, the better you can pick and choose the right tool for each job.&lt;/p&gt;</content></entry><entry><title>"Testing with Mock"</title><link href="http://www.locallyoptimal.com/blog/2012/09/10/testing-with-mock/" rel="alternate"></link><published>2012-09-10T19:34:00-07:00</published><updated>2012-09-10T19:34:00-07:00</updated><author><name>Scott Triglia</name></author><id>tag:www.locallyoptimal.com,2012-09-10:/blog/2012/09/10/testing-with-mock/</id><summary type="html">&lt;p&gt;More than any other area, I've found software testing to be the discipline which I knew the least about before joining up at Yelp full time. Sure, there was the normal insistence in my time as an undergraduate that I learn how to test units of code, and I'd heard plenty about the value of unit testing from any number of people or blogs, but when it came right down to it relatively few people I knew ever employed it to a meaningful degree during college and my graduate work. The simple truth was that projects rarely lasted long enough for the fruits of proper testing to be borne out.&lt;/p&gt;
&lt;p&gt;Now I am sure plenty of people would disagree with that statement, pointing to how their various school projects were made better or simpler by judicious application of unit tests, but the goal of this post isn't arguing about whether or not testing is worthwhile. My goal is to dive in a little bit to one particular area of testing that I had essentially zero exposure to before joining industry -- the mocking of methods in tests.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;More than any other area, I've found software testing to be the discipline which I knew the least about before joining up at Yelp full time. Sure, there was the normal insistence in my time as an undergraduate that I learn how to test units of code, and I'd heard plenty about the value of unit testing from any number of people or blogs, but when it came right down to it relatively few people I knew ever employed it to a meaningful degree during college and my graduate work. The simple truth was that projects rarely lasted long enough for the fruits of proper testing to be borne out.&lt;/p&gt;
&lt;p&gt;Now I am sure plenty of people would disagree with that statement, pointing to how their various school projects were made better or simpler by judicious application of unit tests, but the goal of this post isn't arguing about whether or not testing is worthwhile. My goal is to dive in a little bit to one particular area of testing that I had essentially zero exposure to before joining industry -- the mocking of methods in tests.&lt;/p&gt;


&lt;h3&gt;The basics of mocks&lt;/h3&gt;
&lt;p&gt;Given my complete ignorance the first time I was exposed to mocks, I'll start at the beginning -- a simple definition. Now there's some disagreement on the basic terms involved here, but I will default to &lt;a href="http://martinfowler.com/articles/mocksArentStubs.html"&gt;Martin Fowler's use of the work mock&lt;/a&gt;, and summarize it as follows.&lt;/p&gt;
&lt;p&gt;To mock a method for a test involves verifying behavior. This can include:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;asserting that it is called the expected number of times&lt;/li&gt;
&lt;li&gt;asserting that it is called with the expected arguments&lt;/li&gt;
&lt;li&gt;and finally replacing its normal execution with the execution of a stand-in method (or a fixed return value)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You'll immediately notice two distinct purposes to mocking in tests. First, they define (moreover, assert!) an interface between the code under test and the method you are mocking out. This is done both by agreeing upon the arguments passed to the mocked method and by checking how many times the method is called. Separate from these interface tests, the method itself is replaced by an imposter for the sake of this test.&lt;/p&gt;
&lt;p&gt;So I've briefly described the spirit of a mock, but have left it entirely without motivation. Isn't the entire point of tests to actually test the real system? If I replace part of my code with something else, doesn't this mean any bugs in the mocked out code will be hidden from my tests? Strictly speaking, these complaints are valid. Mocking out a method means, for that test, the method's true code will not be exercised.&lt;/p&gt;
&lt;p&gt;But prepare yourself for this, because it blew my mind the first several times I heard it -- that is the entire point.&lt;/p&gt;
&lt;h3&gt;Why mock at all?&lt;/h3&gt;
&lt;p&gt;Outrage! Mutiny! What good is a test that doesn't actually test the code?! Well collect yourself, settle down, and I'll give you a real-world example that I hope will justify what I'm describing.&lt;/p&gt;
&lt;p&gt;Let's imagine an extremely simple program, one almost too simple to test at all. Our goal is to write a tiny little wrapper around &lt;a href="https://developers.google.com/maps/documentation/geocoding/"&gt;Google's Geocoding API&lt;/a&gt;. In case you aren't already familiar with the concept of a geocoder, I'll summarize it very simply for our purposes as a black box that takes in a string, e.g. 'Mission District, San Francisco', and returns its best guesses at the location you are interested in, along with detailed information on each like longitude/latitude, city, state, country and so on.&lt;/p&gt;
&lt;p&gt;So back to our program. Envision a simple application, which is meant to accept a city name and return you the list of American states which contain a city of that name. Our actual implementation will be a simple wrapper around Google's API where, if the original submitted city name was 'Foobar', we will search for 'Foobar, AL', 'Foobar, AK', and so on with each state name, recording when we get matches and returning the whole list at the end. Forgive me the clumsy example, but it will prove easy to reason about. &lt;/p&gt;
&lt;p&gt;Now lets think about testing our little utility....what parts of our program really need to be tested? Let's throw together a few likely prospects:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We should test to make sure we're constructing our places to geocode correctly.&lt;/li&gt;
&lt;li&gt;Our validation of Google's responses should be tested (if Google has a match for 'Foobar, CA', and we were searching for 'Foobar' as our city, do we add California to our list of matched states?)&lt;/li&gt;
&lt;li&gt;And just for kicks we may as well make sure the whole system runs properly&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Cool...we've got our plan together. Let's assume we really want to test the
above three pieces of our program and our code base is as shown below.&lt;/p&gt;
&lt;p&gt;{% include_code count_cities.py %}&lt;/p&gt;
&lt;p&gt;Looks like writing our first test is easy! We can just directly test the build_query_locations method and ensure it works as we expect. Our second test should be pretty easy too, as we can create some sample responses from Google and make sure we only accept the right ones. The third test though is irritating, since it depends on us actually calling Google's API in our test.&lt;/p&gt;
&lt;p&gt;There are a few reasons this external dependency is unfortunate: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It's slow! A round trip query takes in the neighborhood of 700 ms, which means one run of our program will take on the order of half a minute. Gross.&lt;/li&gt;
&lt;li&gt;It probably doesn't need testing (by us). We generally trust Google to do the right thing. We are currently trying to unit test our own code, and where possible, we should assume that Google's API is a thoroughly tested black box.&lt;/li&gt;
&lt;li&gt;Our own testing is now more complicated. What happens if I want to test how find_matching_states handles a geocoder result that comes back as &lt;code&gt;None&lt;/code&gt;? Or a city with accented characters? These are hard to generate if I'm actually calling out to my geocoding library and using the real result.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This is not a comprehensive list, it's merely three issues that apply to this particular block of code. Now imagine how these complaints scale up when you're talking about a commercial webapp and you can start to see why mocking is so important in tests.&lt;/p&gt;
&lt;h3&gt;Fine, mocking is good. How do I do it?&lt;/h3&gt;
&lt;p&gt;And now we're to the good stuff -- how to mock out methods in your own tests. Gary Bernhardt wrote up a &lt;a href="http://garybernhardt.github.com/python-mock-comparison/"&gt;comparison&lt;/a&gt; of various mocking libraries for python, all of which would work for your purposes. Personally, I've stuck with the mock library and been quite happy with it.&lt;/p&gt;
&lt;p&gt;So enough rambling already, let's see this in action. I've written a single test below, aimed at unit testing the find_matching_states method. In particular, note how we manipulate what the &lt;code&gt;geocode_address&lt;/code&gt; call returns to make our testing simple, while still asserting that we are calling the method with the arguments we expect.&lt;/p&gt;
&lt;p&gt;{% include_code count_cities_test.py %}&lt;/p&gt;
&lt;p&gt;Note that with this test, the only thing we've stopped testing is the content of Google responses for particular arguments to &lt;code&gt;geocode_address&lt;/code&gt;. The danger (as always with mocking), is that we actually are uncertain of this response format or contents. If this were the case, we'd want to construct separate tests -- only operating on the &lt;code&gt;geocode_address&lt;/code&gt; method -- that verified the behavior we required. But in exchange for this, we've replaced a 700ms call with one that takes no time, gained control over the value returned by &lt;code&gt;geocode_address&lt;/code&gt; and in the case of an API like this, possibly saved ourselves real money! These are very real advantages that become even more valuable when employed at scale.&lt;/p&gt;
&lt;p&gt;The simple fact is, you cannot reliably make every test an integration test at scale and -- more importantly -- you shouldn't want to do so. With any luck, this post has pointed out a few advantages of mocking in your tests and explained the overall reasoning behind the choice. All that remains is to pick your library of choice and learn to use it skillfully. And that is all there is to it. There's a ton to learn about how best to use tools like stubs and mocks in your code, but I have been repeatedly impressed by how much they have improved both the clarity and quality of my tests.&lt;/p&gt;</content></entry><entry><title>"Why namedtuples?"</title><link href="http://www.locallyoptimal.com/blog/2012/09/08/why-namedtuples/" rel="alternate"></link><published>2012-09-08T22:36:00-07:00</published><updated>2012-09-08T22:36:00-07:00</updated><author><name>Scott Triglia</name></author><id>tag:www.locallyoptimal.com,2012-09-08:/blog/2012/09/08/why-namedtuples/</id><summary type="html">&lt;p&gt;If you had asked me to explain all I knew about Python's namedtuple class at
the start of this year, I would have probably muttered something about
mutability and trailed off into an uncomfortable silence. The fact of the
matter was, I had seen them used once or twice but never really understood the
reason they were used. Hopefully by the end of this entry I can explain at
least a couple of places you might consider using them over the typical Python
class.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;If you had asked me to explain all I knew about Python's namedtuple class at
the start of this year, I would have probably muttered something about
mutability and trailed off into an uncomfortable silence. The fact of the
matter was, I had seen them used once or twice but never really understood the
reason they were used. Hopefully by the end of this entry I can explain at
least a couple of places you might consider using them over the typical Python
class.&lt;/p&gt;


&lt;p&gt;One of my favorite ways to be introduced to any new concept is by seeing the
simplest example that still motivates its use. In the case of namedtuples, I'm
partial to the example below, which compares two proposed implementations of
a latitude/longitude coordinate -- something I get a lot of experience with in
my day to day work life -- and does some basic manipulation of their contents.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# The primitive approach&lt;/span&gt;
&lt;span class="n"&gt;lat_lng&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;37.78&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;122.40&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;The latitude is &lt;/span&gt;&lt;span class="si"&gt;%f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;lat_lng&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;The longitude is &lt;/span&gt;&lt;span class="si"&gt;%f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;lat_lng&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# The glorious namedtuple&lt;/span&gt;
&lt;span class="n"&gt;LatLng&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;namedtuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;LatLng&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;latitude&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;longitude&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;lat_lng&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LatLng&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;37.78&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;122.40&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;The latitude is &lt;/span&gt;&lt;span class="si"&gt;%f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;lat_lng&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;latitude&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;The longitude is &lt;/span&gt;&lt;span class="si"&gt;%f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;lat_lng&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;longitude&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;By itself, this example is a little forced, but you can already see some benefits:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;increased readability of the print statements instead of cryptic indexing&lt;/li&gt;
&lt;li&gt;the presence of a LatLng class that gives a clear specification (instead of the next person who comes along representing it as a dictionary with two keys, or two floats, and so on...)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So you may well be asking yourself...why not just make a LatLng class?&lt;/p&gt;
&lt;p&gt;An obvious question indeed. If we just stopped at the first example, you could
make a strong argument that a normal Python LatLng class with two attributes
would do everything we wanted without all this fuss. This brings us to the most
important difference between namedtuples and normal Python classes --
attributes in namedtuple subclasses are immutable once created, much like the
tuples for which the class is named. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; LatLng = namedtuple(&amp;#39;LatLng&amp;#39;, [&amp;#39;latitude&amp;#39;, &amp;#39;longitude&amp;#39;])
&amp;gt;&amp;gt;&amp;gt; lat_lng = LatLng(37.78, -122.40) 
&amp;gt;&amp;gt;&amp;gt; lat_lng.latitude = 9.23
Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
AttributeError: can&amp;#39;t set attribute
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Why do I care about mutability?&lt;/h3&gt;
&lt;p&gt;If you're anything like me, you're probably quite used to the idea of writing
highly stateful programs. Maybe you aren't even sure why some immutable class
is the subject of this entire blog entry...all the good stuff gets done by the
smart mutation of objects anyway, right? Well let me try to convince you of the
merits of immutability with a couple examples, hard-won lessons I've taught
myself several times over.&lt;/p&gt;
&lt;p&gt;Anyone who has spent more than a couple weeks programming Python has probably
been bitten by accidentally modifying a data structure they thought was fixed:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;totally_innocent_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;movie_list&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;movie_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;You Got Served&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;the_best_movies_of_all_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;The Godfather&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Citizen Kane&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2001: A Space Odyssey&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;totally_innocent_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;the_best_movies_of_all_time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Just because you think your data structure is properly structured and validated
doesn't prevent a well intentioned person from later modifying it, possibly
even in a way where you don't ever realize it happened. If you are lucky, this
gets noticed and fixed immediately. If you're unlucky, the bug silently
festers, doing who-knows-what to your application. In my experience, the
original author and the well intentioned person who breaks the code later on
are typically both myself. Coding is complicated and allowing your data to be
mutable when you don't want it to be can lead to trouble.&lt;/p&gt;
&lt;h3&gt;And what if I need more than simple attributes?&lt;/h3&gt;
&lt;p&gt;In most of my personal uses of namedtuples, I inevitably have some additional functionality I wanted from the class -- often some computed result of the various attributes built into the class. Sounds an awful lot like a property right? Give something like the following a shot. You get all the benefits of knowing your core data isn't going to be accidentally modified while also getting fancy properties on the side!&lt;/p&gt;
&lt;p&gt;{% include_code namedtuple_properties.py %}&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Everything in moderation&lt;/h3&gt;
&lt;p&gt;So I hope I've at least suggested to you the benefits of trying out
namedtuples, for both code readability and safety. It's certainly possible to
take this too far, but at the very least it's an excellent way to learn a new
approach and get to investigate some of Python's more niche features.&lt;/p&gt;</content></entry><entry><title>"First things first"</title><link href="http://www.locallyoptimal.com/blog/2012/08/31/first-things-first/" rel="alternate"></link><published>2012-08-31T23:53:00-07:00</published><updated>2012-08-31T23:53:00-07:00</updated><author><name>Scott Triglia</name></author><id>tag:www.locallyoptimal.com,2012-08-31:/blog/2012/08/31/first-things-first/</id><summary type="html">&lt;p&gt;As all good internet citizens do eventually, I've decided to try writing down
my various software-related trials and tribulations down in a blog. For the
time being, I'm sticking with Octopress as I care more about the content than
the web design. Maybe later this will become an exercise in â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;As all good internet citizens do eventually, I've decided to try writing down
my various software-related trials and tribulations down in a blog. For the
time being, I'm sticking with Octopress as I care more about the content than
the web design. Maybe later this will become an exercise in web
development...but not quite yet.&lt;/p&gt;
&lt;p&gt;Expect a lot of posts where I walk through some task or tool that I've been
using recently. Hopefully you'll find it interesting.&lt;/p&gt;</content></entry></feed>